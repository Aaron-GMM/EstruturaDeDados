{
    "patches": [
        {
            "label": "2025-05-20_11-25-26",
            "content": "@@ -1395,16 +1395,18 @@\n %0A%09pos:= \n+:=\n  ms.magi\n"
        },
        {
            "label": "2025-05-20_11-25-38",
            "content": "@@ -2388,24 +2388,26 @@\n %22erase%22:%0A%09%09%09\n+//\n  value, _ :=\n@@ -2433,28 +2433,8 @@\n 1%5D)%0A\n-%09%09%09 ms.Erase(value)%0A\n %09%09ca\n"
        },
        {
            "label": "2025-05-20_11-26-05",
            "content": "@@ -1388,17 +1388,11 @@\n int)\n- error\n  %7B%0A\n+\n %0A%09po\n@@ -1446,38 +1446,8 @@\n turn\n- fmt.Errorf(%22valie not found%22)\n %0A%09%7D%0A\n@@ -1526,19 +1526,8 @@\n e--%0A\n-%09return nil\n %0A%7D%0A%0A\n"
        },
        {
            "label": "2025-05-20_11-27-40",
            "content": "@@ -2481,14 +2481,8 @@\n %0A%09%09%09\n- err:=\n  ms.\n@@ -2498,57 +2498,8 @@\n ue)%0A\n-%09%09%09 if err != nil %7B%0A%09%09%09%09%09fmt.Println(err)%0A%09%09%09%09%09%7D%0A\n %09%09ca\n"
        },
        {
            "label": "2025-05-20_11-28-48",
            "content": "@@ -1464,17 +1464,17 @@\n orf(%22val\n-u\n+i\n e not fo\n"
        },
        {
            "label": "2025-05-20_11-29-00",
            "content": "@@ -1577,93 +1577,8 @@\n %0A%7D%0A%0A\n-func (ms *MultiSet) Contains(value int) bool %7B%0A%09return ms.magicSearch(value) != -1%0A%7D%0A\n func\n"
        },
        {
            "label": "2025-05-20_11-29-31",
            "content": "@@ -2652,24 +2652,26 @@\n ntains%22:%0A%09%09%09\n+//\n  value, _ :=\n@@ -2697,106 +2697,8 @@\n 1%5D)%0A\n-%09%09%09 if ms.Contains(value) %7B%0A%09%09%09%09%09fmt.Println(%22true%22)%0A%09%09%09 %7D else %7B%0A%09%09%09%09%09fmt.Println(%22false%22)%0A%09%09%09 %7D%0A\n %09%09ca\n"
        },
        {
            "label": "2025-05-20_11-30-04",
            "content": "@@ -468,25 +468,24 @@\n city%0A%7D%0A%0Afunc\n- \n (ms MultiSet\n@@ -504,36 +504,37 @@\n h(value int) int\n- \n %7B%0A\n-%09\n+   \n left, right := 0\n@@ -550,17 +550,20 @@\n data)-1%0A\n-%09\n+    \n for left\n@@ -570,26 +570,32 @@\n  %3C= right %7B%0A\n-%09%09\n+        \n mid := left \n@@ -611,18 +611,24 @@\n left)/2%0A\n-%09%09\n+        \n if ms.da\n@@ -650,24 +650,40 @@\n e %7B%0A\n-%09%09%09return mid%0A%09%09\n+            return mid %0A        \n %7D el\n@@ -703,35 +703,44 @@\n %5Bmid%5D %3C value %7B%0A\n-%09%09%09\n+            \n left = mid + 1%0A%09\n@@ -730,34 +730,40 @@\n  left = mid + 1%0A\n-%09%09\n+        \n %7D else %7B%0A%09%09%09righ\n@@ -747,35 +747,44 @@\n        %7D else %7B%0A\n-%09%09%09\n+            \n right = mid - 1%0A\n@@ -783,24 +783,36 @@\n mid - 1%0A\n-%09%09%7D%0A%09%7D%0A%09\n+        %7D%0A    %7D%0A    \n return -\n@@ -812,20 +812,22 @@\n eturn -1\n+ \n %0A%7D%0A%0A\n+%0A\n func (ms\n@@ -1071,25 +1071,24 @@\n t(value int)\n- \n %7B%0A%09if ms.siz\n@@ -1345,16 +1345,17 @@\n size++%0A%0A\n+%0A\n %7D%0Afunc (\n@@ -1394,27 +1394,27 @@\n rror %7B%0A%0A%09pos\n- \n :=\n+ \n  ms.magicSea\n@@ -1498,17 +1498,16 @@\n = pos; i\n- \n %3C ms.siz\n@@ -1514,17 +1514,16 @@\n e-1; i++\n- \n %7B%0A%09%09ms.d\n@@ -1921,16 +1921,17 @@\n ain() %7B%0A\n+%09\n %0A%09var li\n@@ -2012,17 +2012,15 @@\n )%0A%09_\n- \n = ms%0A%09_\n- \n = ms\n@@ -2257,24 +2257,25 @@\n  %22init%22:%0A%09%09%09\n+ \n value, _ := \n@@ -2299,16 +2299,17 @@\n %5B1%5D)%0A%09%09%09\n+ \n ms = New\n@@ -2344,16 +2344,17 @@\n rt%22:%0A%09%09%09\n+ \n for _, p\n@@ -2380,16 +2380,17 @@\n :%5D %7B%0A%09%09%09\n+ \n %09value, \n@@ -2416,16 +2416,17 @@\n art)%0A%09%09%09\n+ \n %09ms.Inse\n@@ -2433,25 +2433,25 @@\n rt(value)%0A%09%09\n-%09\n+ \n %7D%0A%09%09case %22sh\n@@ -2501,16 +2501,19 @@\n  %22, %22))%0A\n+%09%09%09\n %0A%09%09case \n@@ -2520,24 +2520,25 @@\n %22erase%22:%0A%09%09%09\n+ \n value, _ := \n@@ -2562,20 +2562,20 @@\n %5B1%5D)%0A%09%09%09\n+ \n err\n- \n := ms.Er\n@@ -2588,16 +2588,17 @@\n lue)%0A%09%09%09\n+ \n if err !\n@@ -2605,24 +2605,25 @@\n = nil %7B%0A%09%09%09%09\n+%09\n fmt.Println(\n@@ -2627,16 +2627,18 @@\n ln(err)%0A\n+%09%09\n %09%09%09%7D%0A%09%09c\n@@ -2656,16 +2656,17 @@\n ns%22:%0A%09%09%09\n+ \n value, _\n@@ -2694,16 +2694,17 @@\n %5B1%5D)%0A%09%09%09\n+ \n if ms.Co\n@@ -2719,16 +2719,17 @@\n alue) %7B%0A\n+%09\n %09%09%09%09fmt.\n@@ -2747,16 +2747,17 @@\n ue%22)%0A%09%09%09\n+ \n %7D else %7B\n@@ -2757,16 +2757,17 @@\n  else %7B%0A\n+%09\n %09%09%09%09fmt.\n@@ -2786,16 +2786,17 @@\n se%22)%0A%09%09%09\n+ \n %7D%0A%09%09case\n"
        },
        {
            "label": "2025-05-20_11-48-58",
            "content": "@@ -1595,418 +1595,8 @@\n 1%0A%7D%0A\n-func (ms *MultiSet) Count(value int) int %7B%0A%09count := 0%0A%09for i := 0; i %3C ms.size; i++ %7B%0A%09%09if ms.data%5Bi%5D == value %7B%0A%09%09%09count++%0A%09%09%7D%0A%09%7D%0A%09return count%0A%7D%0A// func (ms *MultiSet) Unique() %7B%0A// %09uniqueData := make(%5B%5Dint, 0)%0A// %09for i := 0; i %3C ms.size; i++ %7B%0A// %09%09if ms.Count(ms.data%5Bi%5D) == 1 %7B%0A// %09%09%09uniqueData = append(uniqueData, ms.data%5Bi%5D)%0A// %09%09%7D%0A// %09%7D%0A// %09ms.data = uniqueData%0A// %09ms.size = len(uniqueData)%0A// %7D%0A%0A\n func\n"
        },
        {
            "label": "2025-05-20_11-50-01",
            "content": "@@ -3133,16 +3133,18 @@\n nt%22:%0A%09%09%09\n+//\n  value, \n@@ -3174,60 +3174,8 @@\n 1%5D)%0A\n-%09%09%09 count := ms.Count(value)%0A%09%09%09 fmt.Println(count)%0A\n %09%09ca\n"
        },
        {
            "label": "2025-05-20_11-50-31",
            "content": "@@ -1735,24 +1735,27 @@\n urn count%0A%7D%0A\n+// \n func (ms *Mu\n@@ -1773,16 +1773,19 @@\n que() %7B%0A\n+// \n %09uniqueD\n@@ -1806,16 +1806,19 @@\n int, 0)%0A\n+// \n %09for i :\n@@ -1833,32 +1833,35 @@\n  ms.size; i++ %7B%0A\n+// \n %09%09if ms.Count(ms\n@@ -1877,16 +1877,19 @@\n  == 1 %7B%0A\n+// \n %09%09%09uniqu\n@@ -1927,23 +1927,32 @@\n ata%5Bi%5D)%0A\n+// \n %09%09%7D%0A\n-%09%7D%0A\n+// %09%7D%0A// \n %09ms.data\n@@ -1961,24 +1961,27 @@\n  uniqueData%0A\n+// \n %09ms.size = l\n@@ -1999,89 +1999,11 @@\n ta)%0A\n-%7D%0Afunc (ms *MultiSet) Clear() %7B%0A%09ms.data = make(%5B%5Dint, ms.capacity)%0A%09ms.size = 0%0A\n+// \n %7D%0A%0Af\n"
        },
        {
            "label": "2025-05-20_11-53-02",
            "content": "@@ -3292,27 +3292,8 @@\n e%22:%0A\n-%09%09%09ms.Unique()%0A%09%09%09%0A\n %09%09ca\n"
        },
        {
            "label": "2025-05-20_11-53-45",
            "content": "@@ -1767,20 +1767,16 @@\n Unique()\n- int\n  %7B%0A%09uniq\n@@ -1781,18 +1781,30 @@\n ique\n-Count := 0\n+Data := make(%5B%5Dint, 0)\n %0A%09fo\n@@ -1841,90 +1841,138 @@\n %09if \n-i == 0 %7C%7C ms.data%5Bi%5D != ms.data%5Bi-1%5D %7B%0A%09%09%09uniqueCount++%0A%09%09%7D%0A%09%7D%0A%09return uniqueCount\n+ms.Count(ms.data%5Bi%5D) == 1 %7B%0A%09%09%09uniqueData = append(uniqueData, ms.data%5Bi%5D)%0A%09%09%7D%0A%09%7D%0A%09ms.data = uniqueData%0A%09ms.size = len(uniqueData)\n %0A%7D%0Af\n@@ -3291,28 +3291,16 @@\n ue%22:%0A%09%09%09\n-fmt.Println(\n ms.Uniqu\n@@ -3302,17 +3302,20 @@\n Unique()\n-)\n+%0A%09%09%09\n %0A%09%09case \n"
        },
        {
            "label": "2025-05-20_11-54-57",
            "content": "@@ -3280,22 +3280,8 @@\n r%22:%0A\n-%09%09%09ms.Clear()%0A\n %09%09de\n"
        },
        {
            "label": "2025-05-20_11-55-12",
            "content": "@@ -3294,41 +3294,8 @@\n r()%0A\n-%09%09%09Join(ms.data%5B:ms.size%5D, %22, %22)%0A\n %09%09de\n"
        },
        {
            "label": "2025-05-20_11-55-38",
            "content": "@@ -3297,23 +3297,35 @@\n %0A%09%09%09\n-fmt.Println(%22%5B%5D\n+Join(ms.data%5B:ms.size%5D, %22, \n %22)%0A%09\n"
        },
        {
            "label": "2025-05-20_11-55-53",
            "content": "@@ -2072,18 +2072,16 @@\n return %22\n-%5B%5D\n %22%0A%09%7D%0A%09re\n@@ -3290,16 +3290,37 @@\n Clear()%0A\n+%09%09%09fmt.Println(%22%5B%5D%22)%0A\n %09%09defaul\n"
        },
        {
            "label": "2025-05-20_11-56-41",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype MultiSet struct {\n\tdata     []int\n\tsize     int\n\tcapacity int\n}\n\nfunc NewMultiSet(capacity int) *MultiSet {\n\treturn &MultiSet{\n\t\tdata:     make([]int, capacity),\n\t\tsize:     0,\n\t\tcapacity: capacity,\n\t}\n}\nfunc (ms *MultiSet) expand(newCapacity int) {\n\tif newCapacity < ms.size {\n\t\treturn\n\t}\n\tnewData := make([]int, newCapacity)\n\tcopy(newData, ms.data)\n\tms.data = newData\n\tms.capacity = newCapacity\n}\n\nfunc (ms MultiSet) magicSearch(value int) int {\n\tleft, right := 0, len(ms.data)-1\n\tfor left <= right {\n\t\tmid := left + (right-left)/2\n\t\tif ms.data[mid] == value {\n\t\t\treturn mid\n\t\t} else if ms.data[mid] < value {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid - 1\n\t\t}\n\t}\n\treturn -1\n}\n\nfunc (ms *MultiSet) findInsertPos(value int) int {\n\tleft, right := 0, ms.size\n\tfor left < right {\n\t\tmid := (left + right) / 2\n\t\tif ms.data[mid] < value {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid\n\t\t}\n\t}\n\treturn left\n}\nfunc (ms *MultiSet) Insert(value int) {\n\tif ms.size == ms.capacity {\n\t\tnewCapacity := ms.capacity * 2\n\t\tif newCapacity == 0 {\n\t\t\tnewCapacity = 1\n\t\t}\n\t\tms.expand(newCapacity)\n\t}\n\tpos := ms.findInsertPos(value)\n\tfor i := ms.size; i > pos; i-- {\n\t\tms.data[i] = ms.data[i-1]\n\t}\n\tms.data[pos] = value\n\tms.size++\n\n}\nfunc (ms *MultiSet) Erase(value int) error {\n\n\tpos := ms.magicSearch(value)\n\tif pos == -1 {\n\t\treturn fmt.Errorf(\"value not found\")\n\t}\n\tfor i := pos; i < ms.size-1; i++ {\n\t\tms.data[i] = ms.data[i+1]\n\t}\n\tms.size--\n\treturn nil\n}\n\nfunc (ms *MultiSet) Contains(value int) bool {\n\treturn ms.magicSearch(value) != -1\n}\nfunc (ms *MultiSet) Count(value int) int {\n\tcount := 0\n\tfor i := 0; i < ms.size; i++ {\n\t\tif ms.data[i] == value {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\nfunc (ms *MultiSet) Unique() int {\n\tuniqueCount := 0\n\tfor i := 0; i < ms.size; i++ {\n\t\tif i == 0 || ms.data[i] != ms.data[i-1] {\n\t\t\tuniqueCount++\n\t\t}\n\t}\n\treturn uniqueCount\n}\nfunc (ms *MultiSet) Clear() {\n\tms.data = make([]int, ms.capacity)\n\tms.size = 0\n}\n\nfunc Join(slice []int, sep string) string {\n\tif len(slice) == 0 {\n\t\treturn \"[]\"\n\t}\n\tresult := \"[\"\n\tresult += fmt.Sprintf(\"%d\", slice[0])\n\tfor _, value := range slice[1:] {\n\t\tresult += sep + fmt.Sprintf(\"%d\", value)\n\t}\n\tresult += \"]\"\n\treturn result\n}\n\nfunc main() {\n\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\tms := NewMultiSet(0)\n\t_ = ms\n\t_ = ms.magicSearch(0)\n\tfor scanner.Scan() {\n\t\tfmt.Print(\"$\")\n\t\tline = scanner.Text()\n\t\targs := strings.Fields(line)\n\t\tfmt.Println(line)\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = args[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\tvalue, _ := strconv.Atoi(args[1])\n\t\t\tms = NewMultiSet(value)\n\t\tcase \"insert\":\n\t\t\tfor _, part := range args[1:] {\n\t\t\t\tvalue, _ := strconv.Atoi(part)\n\t\t\t\tms.Insert(value)\n\t\t\t}\n\t\tcase \"show\":\n\t\t\tfmt.Println(Join(ms.data[:ms.size], \", \"))\n\n\t\tcase \"erase\":\n\t\t\tvalue, _ := strconv.Atoi(args[1])\n\t\t\terr := ms.Erase(value)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t}\n\t\tcase \"contains\":\n\t\t\tvalue, _ := strconv.Atoi(args[1])\n\t\t\tif ms.Contains(value) {\n\t\t\t\tfmt.Println(\"true\")\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"false\")\n\t\t\t}\n\t\tcase \"count\":\n\t\t\t value, _ := strconv.Atoi(args[1])\n\t\t\t count := ms.Count(value)\n\t\t\t fmt.Println(count)\n\t\tcase \"unique\":\n\t\t\tfmt.Println(ms.Unique())\n\t\tcase \"clear\":\n\t\t\tms.Clear()\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n"
        }
    ]
}