{
    "patches": [
        {
            "label": "2025-06-04_13-02-19",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\ntype Node struct {\n    Value rune\n    Next *Node\n    Prev *Node\n}\ntype Editor struct {\n    Head *Node \n    Tail *Node\n    Cursor *Node\n}\n\nfunc NewNode(value rune) *Node{\n    return &Node{\n        Value: value,\n        Next: nil,\n        Prev: nil,\n    }\n}\nfunc NewEditor() *Editor{\n    head := NewNode(0)\n    tail := NewNode(0)\n    head.Next =tail\n    tail.Prev = head\n    return &Editor{\n        Head: head,\n        Tail: tail,\n        Cursor: tail,\n    }\n}\n\nfunc (e *Editor) insert(value rune){\n    newNode := NewNode(value)\n    prevNode := e.Cursor.Prev\n\n    prevNode.Next = newNode\n    newNode.Prev = prevNode\n    newNode.Next = e.Cursor\n    e.Cursor.Prev = newNode\n}\n\nfunc (e * Editor) moveLeft(){\n    if e.Cursor.Prev != e.Head {\n        e.Cursor = e.Cursor.Prev\n    }\n}\nfunc (e *Editor) moveRight(){\n    if e.Cursor != e.Tail {\n        e.Cursor = e.Cursor.Next\n    }\n}\nfunc (e *Editor) backspace() {\n    toDelete := e.Cursor.Prev\n    if toDelete != e.Head {\n        left := toDelete.Prev\n        right := e.Cursor\n        left.Next = right\n        right.Prev = left\n    }\n}\nfunc (e *Editor) deleteAtCursor(){\n    if e.Cursor != e.Tail {\n        toDelete := e.Cursor\n        left := toDelete.Prev\n        right := toDelete.Next\n        left.Next = right\n        right.Prev = left\n        e.Cursor = right\n    }\n}\nfunc (e *Editor) showDisplay() string {\n\tvar result []rune \n\tfor node := e.Head.Next; node != e.Tail; node = node.Next {\n\t\tif node == e.Cursor {\n\t\t\tresult = append(result, '|')\n\t\t}\n\t\tif node.Value == '\\n' {\n\t\t\tresult = append(result, '\\n')\n\t\t} else {\n\t\t\tresult = append(result, node.Value)\n\t\t}\n\t}\n\tif e.Cursor == e.Tail {\n\t\tresult = append(result, '|')\n\t}\n   \n\treturn string(result) \n}\n\n\nfunc processInput(input string) string {\n\teditor := NewEditor()\n\tfor _, char := range input {\n\t\tswitch char {\n\t\tcase 'R':\n\t\t\teditor.insert('\\n')\n\n\t\tcase 'B':\n\t\t\teditor.backspace()\n\n\t\tcase 'D':\n\t\t\teditor.deleteAtCursor()\n\n\t\tcase '<':\n\t\t\teditor.moveLeft()\n\n\t\tcase '>':\n\t\t\teditor.moveRight()  \n\n\t\tdefault:\n\t\t\tif (char >= 'a' && char <= 'z') || char == '-' {\n\t\t\t\teditor.insert(char)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn editor.showDisplay()\n\n}\n\nfunc main() {\n   scanner := bufio.NewScanner(os.Stdin)\n\n    for scanner.Scan() {\n        input := scanner.Text()\n\n        if input == \"\" || input == \"exit\" {\n            break\n        }\n        result:= processInput(input)\n        fmt.Println(result)\n\n    }\n    if err := scanner.Err(); err != nil {\n        fmt.Println(\"Error reading input:\", err)\n    }\n}\n"
        }
    ]
}