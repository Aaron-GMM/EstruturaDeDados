{
    "patches": [
        {
            "label": "2025-06-04_13-10-19",
            "content": "@@ -136,539 +136,8 @@\n t%0A%7D%0A\n-func NewDeque(capacity int) *Deque %7B%0A%09return &Deque%7B%0A%09%09data:     make(%5B%5Dint, capacity),%0A%09%09front:    0,%0A%09%09size:     0,%0A%09%09capacity: capacity,%0A%09%7D%0A%7D%0A%0Afunc (b *Deque) Len() int %7B%0A%09return b.size%0A%7D%0A%0Afunc (b *Deque) PushBack(value int) %7B%0A%09if b.size == b.capacity %7B%0A%09%09newCapacity := b.capacity * 2%0A%09%09newData := make(%5B%5Dint, newCapacity)%0A%09%09for i := 0; i %3C b.size; i++ %7B%0A%09%09%09newData%5Bi%5D = b.data%5B(b.front+i)%25b.capacity%5D%0A%09%09%7D%0A%09%09b.data = newData%0A%09%09b.front = 0%0A%09%09b.capacity = newCapacity%0A%09%7D%0A%09b.data%5B(b.front+b.size)%25b.capacity%5D = value%0A%09b.size++%0A%7D%0A%0A\n %0Afun\n@@ -1162,16 +1162,18 @@\n ze%22:%0A%09%09%09\n+//\n  fmt.Pri\n"
        },
        {
            "label": "2025-06-04_13-13-20",
            "content": "@@ -42,19 +42,8 @@\n os%22%0A\n-%09%22strconv%22%0A\n %09%22st\n@@ -1740,16 +1740,19 @@\n ck%22:%0A%09%09%09\n+// \n for _, v\n@@ -1775,16 +1775,19 @@\n :%5D %7B%0A%09%09%09\n+// \n %09num, _ \n@@ -1808,16 +1808,19 @@\n i(v)%0A%09%09%09\n+// \n %09buf.Pus\n@@ -1833,16 +1833,19 @@\n num)%0A%09%09%09\n+// \n %7D%0A%09%09case\n"
        },
        {
            "label": "2025-06-04_13-13-39",
            "content": "@@ -338,119 +338,9 @@\n e%0A%7D%0A\n-func (n *Deque) Newcapacity() int %7B%0A%09if n.size == n.capacity %7B%0A%09%09return n.capacity * 2%0A%09%7D%0A%09return n.capacity%0A%7D\n %0A\n+\n func\n@@ -415,35 +415,32 @@\n pacity := b.\n-New\n capacity\n ()%0A%09%09newData\n@@ -427,18 +427,20 @@\n capacity\n-()\n+ * 2\n %0A%09%09newDa\n@@ -677,373 +677,8 @@\n +%0A%7D%0A\n-func (b *Deque) PushFront(value int) %7B%0A%09   if b.size == b.capacity%7B%0A%09%09 newCapacity:= b.Newcapacity()%0A%09%09 newData := make(%5B%5Dint, newCapacity)%0A%09%09 for i := 0; i %3C b.size; i++ %7B%0A%09%09%09 newData%5Bi+1%5D = b.data%5B(b.front+i)%25b.capacity%5D%0A%09%09 %7D%0A%09%09 b.data = newData%0A%09%09 b.front = 0%0A%09%09 b.capacity = newCapacity%0A%09   %7D%0A%09   b.data%5B(b.front-1+b.capacity)%25b.capacity%5D = value%0A%09   b.size++%0A%7D\n %0A%0Afu\n@@ -1857,24 +1857,27 @@\n _front%22:%0A%09%09%09\n+// \n for _, v := \n@@ -1888,32 +1888,35 @@\n e args%5B1:%5D %7B%0A%09%09%09\n+// \n %09num, _ := strco\n@@ -1921,32 +1921,35 @@\n conv.Atoi(v)%0A%09%09%09\n+// \n %09buf.PushFront(n\n@@ -1947,32 +1947,35 @@\n shFront(num)%0A%09%09%09\n+// \n %7D%0A%09%09case %22pop_ba\n"
        },
        {
            "label": "2025-06-04_13-16-19",
            "content": "@@ -816,32 +816,35 @@\n t(value int) %7B%0A%09\n+   \n if b.size == b.c\n@@ -842,37 +842,37 @@\n ze == b.capacity\n- \n %7B%0A%09%09\n+ \n newCapacity := b\n@@ -858,33 +858,32 @@\n %7B%0A%09%09 newCapacity\n- \n := b.Newcapacity\n@@ -879,32 +879,33 @@\n Newcapacity()%0A%09%09\n+ \n newData := make(\n@@ -918,32 +918,33 @@\n  newCapacity)%0A%09%09\n+ \n for i := 0; i %3C \n@@ -952,32 +952,33 @@\n .size; i++ %7B%0A%09%09%09\n+ \n newData%5Bi%5D = b.d\n@@ -962,32 +962,34 @@\n  %7B%0A%09%09%09 newData%5Bi\n++1\n %5D = b.data%5B(b.fr\n@@ -1001,36 +1001,38 @@\n )%25b.capacity%5D%0A%09%09\n+ \n %7D%0A%09%09\n+ \n b.data = newData\n@@ -1026,32 +1026,33 @@\n ata = newData%0A%09%09\n+ \n b.front = 0%0A%09%09b.\n@@ -1041,32 +1041,33 @@\n %09 b.front = 0%0A%09%09\n+ \n b.capacity = new\n@@ -1080,29 +1080,32 @@\n ty%0A%09\n-%7D%0A%09b.front = \n+   %7D%0A%09   b.data%5B\n (b.front\n  - 1\n@@ -1104,15 +1104,11 @@\n ront\n- - 1 + \n+-1+\n b.ca\n@@ -1114,19 +1114,17 @@\n apacity)\n- %25 \n+%25\n b.capaci\n@@ -1129,24 +1129,8 @@\n city\n-%0A%09b.data%5Bb.front\n %5D = \n@@ -1128,32 +1128,35 @@\n acity%5D = value%0A%09\n+   \n b.size++%0A%7D%0A%0Afunc\n"
        },
        {
            "label": "2025-06-04_13-17-45",
            "content": "@@ -1158,374 +1158,8 @@\n ++%0A%7D\n-%0Afunc (b *Deque) PopBack() error %7B%0A%09if b.size == 0 %7B%0A%09%09return fmt.Errorf(%22fail: deque vazio%22)%0A%09%7D%0A%09b.size--%0A%09return nil%0A%7D%0Afunc (b *Deque) PopFront() error %7B%0A%09if b.size == 0 %7B%0A%09%09return fmt.Errorf(%22fail: deque vazio%22)%0A%09%7D%0A%09b.front = (b.front + 1) %25 b.capacity%0A%09b.size--%0A%09return nil%0A%7D%0Afunc (n *Deque) Clear() %7B%0A%09n.data = make(%5B%5Dint, n.capacity)%0A%09n.front = 0%0A%09n.size = 0%0A%7D\n %0A%0Afu\n@@ -2447,24 +2447,27 @@\n p_back%22:%0A%09%09%09\n+// \n if err := bu\n@@ -2487,32 +2487,35 @@\n err != nil %7B%0A%09%09%09\n+// \n %09fmt.Println(err\n@@ -2511,32 +2511,35 @@\n Println(err)%0A%09%09%09\n+// \n %7D%0A%09%09case %22pop_fr\n@@ -2547,16 +2547,19 @@\n nt%22:%0A%09%09%09\n+// \n if err :\n@@ -2592,16 +2592,19 @@\n il %7B%0A%09%09%09\n+// \n %09fmt.Pri\n@@ -2612,24 +2612,27 @@\n tln(err)%0A%09%09%09\n+// \n %7D%0A%09%09case %22fr\n@@ -2906,16 +2906,19 @@\n ar%22:%0A%09%09%09\n+// \n buf.Clea\n"
        },
        {
            "label": "2025-06-04_13-18-56",
            "content": "@@ -1226,38 +1226,37 @@\n t.Errorf(%22fail: \n-buffer\n+deque\n  vazio%22)%0A%09%7D%0A%09b.s\n@@ -1359,14 +1359,13 @@\n il: \n-buffer\n+deque\n  vaz\n"
        },
        {
            "label": "2025-06-04_13-19-22",
            "content": "@@ -1743,301 +1743,8 @@\n %5D%22%0A%7D\n-%0Afunc (b *Deque) Front() (int, error) %7B%0A%09if b.size == 0 %7B%0A%09%09return 0, fmt.Errorf(%22fail: buffer vazio%22)%0A%09%7D%0A%09return b.data%5Bb.front%5D, nil%0A%7D%0Afunc (b *Deque) Back() (int, error) %7B%0A%09if b.size == 0 %7B%0A%09%09return 0, fmt.Errorf(%22fail: buffer vazio%22)%0A%09%7D%0A%09return b.data%5B(b.front+b.size-1)%25b.capacity%5D, nil%0A%7D\n %0A%0Afu\n@@ -1814,24 +1814,27 @@\n city)%0A%09for i\n+, _\n  := range re\n@@ -2465,19 +2465,16 @@\n ow%22:%0A%09%09%09\n-// \n fmt.Prin\n@@ -2990,16 +2990,19 @@\n nt%22:%0A%09%09%09\n+// \n if val, \n@@ -3029,32 +3029,35 @@\n err != nil %7B%0A%09%09%09\n+// \n %09fmt.Println(err\n@@ -3061,16 +3061,19 @@\n err)%0A%09%09%09\n+// \n %7D else %7B\n@@ -3072,24 +3072,27 @@\n %7D else %7B%0A%09%09%09\n+// \n %09fmt.Println\n@@ -3096,24 +3096,27 @@\n tln(val)%0A%09%09%09\n+// \n %7D%0A%09%09case %22ba\n"
        },
        {
            "label": "2025-06-04_13-23-04",
            "content": "@@ -2751,24 +2751,27 @@\n  %22show%22:%0A%09%09%09\n+// \n fmt.Println(\n"
        },
        {
            "label": "2025-06-04_13-23-13",
            "content": "@@ -3394,24 +3394,27 @@\n  %22back%22:%0A%09%09%09\n+// \n if val, err \n@@ -3436,32 +3436,35 @@\n err != nil %7B%0A%09%09%09\n+// \n %09fmt.Println(err\n@@ -3460,32 +3460,35 @@\n Println(err)%0A%09%09%09\n+// \n %7D else %7B%0A%09%09%09%09fmt\n@@ -3475,32 +3475,35 @@\n %09// %7D else %7B%0A%09%09%09\n+// \n %09fmt.Println(val\n@@ -3499,32 +3499,35 @@\n Println(val)%0A%09%09%09\n+// \n %7D%0A%09%09case %22clear%22\n"
        },
        {
            "label": "2025-06-04_13-51-43",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Deque struct {\n\tdata     []int\n\tfront    int\n\tsize     int\n\tcapacity int\n}\nfunc NewDeque(capacity int) *Deque {\n\treturn &Deque{\n\t\tdata:     make([]int, capacity),\n\t\tfront:    0,\n\t\tsize:     0,\n\t\tcapacity: capacity,\n\t}\n}\n\nfunc (b *Deque) Len() int {\n\treturn b.size\n}\nfunc (n *Deque) Newcapacity() int {\n\tif n.size == n.capacity {\n\t\treturn n.capacity * 2\n\t}\n\treturn n.capacity\n}\nfunc (b *Deque) PushBack(value int) {\n\tif b.size == b.capacity {\n\t\tnewCapacity := b.Newcapacity()\n\t\tnewData := make([]int, newCapacity)\n\t\tfor i := 0; i < b.size; i++ {\n\t\t\tnewData[i] = b.data[(b.front+i)%b.capacity]\n\t\t}\n\t\tb.data = newData\n\t\tb.front = 0\n\t\tb.capacity = newCapacity\n\t}\n\tb.data[(b.front+b.size)%b.capacity] = value\n\tb.size++\n}\nfunc (b *Deque) PushFront(value int) {\n\tif b.size == b.capacity {\n\t\tnewCapacity := b.Newcapacity()\n\t\tnewData := make([]int, newCapacity)\n\t\tfor i := 0; i < b.size; i++ {\n\t\t\tnewData[i] = b.data[(b.front+i)%b.capacity]\n\t\t}\n\t\tb.data = newData\n\t\tb.front = 0\n\t\tb.capacity = newCapacity\n\t}\n\tb.front = (b.front - 1 + b.capacity) % b.capacity\n\tb.data[b.front] = value\n\tb.size++\n}\nfunc (b *Deque) PopBack() error {\n\tif b.size == 0 {\n\t\treturn fmt.Errorf(\"fail: buffer vazio\")\n\t}\n\tb.size--\n\treturn nil\n}\nfunc (b *Deque) PopFront() error {\n\tif b.size == 0 {\n\t\treturn fmt.Errorf(\"fail: buffer vazio\")\n\t}\n\tb.front = (b.front + 1) % b.capacity\n\tb.size--\n\treturn nil\n}\nfunc (n *Deque) Clear() {\n\tn.data = make([]int, n.capacity)\n\tn.front = 0\n\tn.size = 0\n}\n\nfunc (b *Deque) String() string {\n\tresult := []string{}\n\tfor i := range b.size {\n\t\tval := b.data[(b.front+i)%b.capacity]\n\t\tresult = append(result, fmt.Sprint(val))\n\t}\n\treturn \"[\" + strings.Join(result, \", \") + \"]\"\n}\nfunc (b *Deque) Front() (int, error) {\n\tif b.size == 0 {\n\t\treturn 0, fmt.Errorf(\"fail: buffer vazio\")\n\t}\n\treturn b.data[b.front], nil\n}\nfunc (b *Deque) Back() (int, error) {\n\tif b.size == 0 {\n\t\treturn 0, fmt.Errorf(\"fail: buffer vazio\")\n\t}\n\treturn b.data[(b.front+b.size-1)%b.capacity], nil\n}\n\nfunc (b *Deque) Debug() string {\n\tresult := make([]string, b.capacity)\n\tfor i := range result {\n\t\tresult[i] = \" _\"\n\t\tif i == b.front {\n\t\t\tresult[i] = \">_\"\n\t\t}\n\t}\n\tfor i := range b.size {\n\t\tindex := (b.front + i) % b.capacity\n\t\tval := b.data[index]\n\t\tprefix := \" \"\n\t\tif i == 0 {\n\t\t\tprefix = \">\"\n\t\t}\n\t\tresult[index] = fmt.Sprintf(\"%s%d\", prefix, val)\n\t}\n\treturn strings.Join(result, \" |\")\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tbuf := &Deque{data: make([]int, 4), capacity: 4}\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\tfmt.Println(buf.String())\n\t\tcase \"debug\":\n\t\t\tfmt.Println(buf.Debug())\n\t\tcase \"size\":\n\t\t\t fmt.Println(buf.Len())\n\t\tcase \"push_back\":\n\t\t\tfor _, v := range args[1:] {\n\t\t\t\tnum, _ := strconv.Atoi(v)\n\t\t\t\tbuf.PushBack(num)\n\t\t\t}\n\t\tcase \"push_front\":\n\t\t\tfor _, v := range args[1:] {\n\t\t\t\tnum, _ := strconv.Atoi(v)\n\t\t\t\tbuf.PushFront(num)\n\t\t\t}\n\t\tcase \"pop_back\":\n\t\t\tif err := buf.PopBack(); err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t}\n\t\tcase \"pop_front\":\n\t\t\tif err := buf.PopFront(); err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t}\n\t\tcase \"front\":\n\t\t\tif val, err := buf.Front(); err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t} else {\n\t\t\t\tfmt.Println(val)\n\t\t\t}\n\t\tcase \"back\":\n\t\t\tif val, err := buf.Back(); err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t} else {\n\t\t\t\tfmt.Println(val)\n\t\t\t}\n\t\tcase \"clear\":\n\t\t\tbuf.Clear()\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n"
        }
    ]
}