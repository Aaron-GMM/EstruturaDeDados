{
    "patches": [
        {
            "label": "2025-06-11_18-57-20",
            "content": "@@ -17,16 +17,42 @@\n port (%0A%09\n+%22ed/database/chaves/queue%22\n %0A%0A)%0A%0Afun\n@@ -66,17 +66,17 @@\n ) %7B%0A\n-Q\n+q\n ueue := \n NewQ\n@@ -71,16 +71,22 @@\n ueue := \n+queue.\n NewQueue\n@@ -98,24 +98,419 @@\n ()%0A%09\n-Queue.Enqueue(1)\n+queue.Enqueue(1)%0A%09queue.Enqueue(2)%0A%09queue.Enqueue(3)%0A%09for !queue.IsEmpty() %7B%0A%09%09item := queue.Dequeue()%0A%09%09println(item) // Output: 1, 2, 3%0A%09%7D%0A%09println(queue.String()) // Output: %5B %5D%0A%09println(%22Queue is empty:%22, queue.IsEmpty()) // Output: Queue is empty: true%0A%09println(%22Queue is empty:%22, queue.IsEmpty()) // Output: Queue is empty: true%0A%09println(%22Queue is empty:%22, queue.IsEmpty()) // Output: Queue is empty: true\n %0A%09pr\n@@ -519,30 +519,76 @@\n tln(\n+%22\n Queue\n-) // Output: %5B 1 %5D\n+ is empty:%22, queue.IsEmpty()) // Output: Queue is empty: true%0A%09\n %0A%7D%0A\n"
        },
        {
            "label": "2025-06-11_18-57-53",
            "content": "@@ -21,489 +21,58 @@\n  (%0A%09\n-%22bufio%22%0A%09%22fmt%22%0A%09%22os%22%0A%09%22strconv%22%0A%09%22strings%22%0A)%0A%0Afunc timesToList() *Queue%5Bstring%5D %7B%0A%09times := %5B%5Dstring%7B%22A%22, %22B%22, %22C%22, %22D%22, %22E%22, %22F%22, %22G%22, %22H%22, %22I%22, %22J%22, %22K%22, %22L%22, %22M%22, %22N%22, %22O%22, %22P%22%7D%0A%09q := NewQueue%5Bstring%5D()%0A%09for _, time := range times %7B%0A%09%09q.Enqueue(time)%0A%09%7D%0A%09return q%0A%7D%0A%0Afunc processarChaves(times *Queue%5Bstring%5D, resultados %5B%5D%5B2%5Dint) string %7B%0A%09for _, resultado := range resultados %7B%0A%09%09time1 := times.Dequeue()%0A%09%09time2 := times.Dequeue()%0A%0A%09%09if resultado%5B0%5D %3E resultado%5B1%5D %7B%0A%09%09%09times\n+%0A%0A)%0A%0Afunc main() %7B%0AQueue := NewQueue%5Bint%5D()%0A%09Queue\n .Enq\n@@ -80,525 +80,42 @@\n eue(\n-time\n 1)\n- \n %0A%09\n-%09%7D else %7B%0A%09%09%09times.Enqueue(time2) %0A%09%09%7D%0A%09%09%0A%09%7D%0A%09%09return string(times.Dequeue())%0A%0A%7D%0Afunc main() %7B%0A%09scanner := bufio.NewScanner(os.Stdin)%0A%0A%09for scanner.Scan() %7B%0A%09%09resultado := make(%5B%5D%5B2%5Dint, 0, 15)%0A%09%09partes := strings.Fields(scanner.Text())%0A%09%09gol1, _ := strconv.Atoi(partes%5B0%5D)%0A%09%09gol2, _ := strconv.Atoi(partes%5B1%5D)%0A%09%09resultado = append(resultado, %5B2%5Dint%7Bgol1, gol2%7D)%0A%09%09campeao := processarChaves(timesToList(), resultado)%0A%09%09if campeao != %22%22 %7B%0A%09%09%09fmt.Println(campeao)%0A%09%09%7D else %7B%0A%09%09%09println(%22N%C3%A3o h%C3%A1 campe%C3%A3o%22)%0A%09%09%7D%0A%09%7D\n+println(Queue) // Output: %5B 1 %5D\n %0A%7D%0A\n"
        },
        {
            "label": "2025-06-11_19-28-55",
            "content": "@@ -654,22 +654,8 @@\n in)%0A\n-%09campeao := %22%22\n %0A%09fo\n@@ -893,9 +893,9 @@\n eao \n-+\n+:\n = pr\n@@ -936,21 +936,16 @@\n tado)%0A%09%09\n-%0A%09%7D%0A%09\n if campe\n@@ -1023,10 +1023,13 @@\n o%22)%0A%09%09%7D%0A\n+%09%7D%0A\n %7D%0A\n"
        },
        {
            "label": "2025-06-11_19-29-50",
            "content": "@@ -513,16 +513,17 @@\n e(time1)\n+ \n %0A%09%09%7D els\n@@ -553,17 +553,21 @@\n me2)\n+ \n %0A%09%09%7D%0A\n+%09%09\n %0A%09%7D%0A\n+%09\n %09ret\n@@ -665,16 +665,39 @@\n o := %22%22%0A\n+%09for scanner.Scan() %7B%0A%09\n %09resulta\n@@ -727,31 +727,8 @@\n  15)\n-%0A%0A%09for scanner.Scan() %7B\n %0A%09%09p\n@@ -893,20 +893,17 @@\n  gol2%7D)%0A\n-%0A%09%7D%0A\n+%09\n %09campeao\n@@ -948,16 +948,21 @@\n ultado)%0A\n+%09%09%0A%09%7D\n %0A%09if cam\n@@ -974,16 +974,17 @@\n != %22%22 %7B%0A\n+%09\n %09%09fmt.Pr\n@@ -998,16 +998,17 @@\n ampeao)%0A\n+%09\n %09%7D else \n@@ -1009,16 +1009,17 @@\n  else %7B%0A\n+%09\n %09%09printl\n@@ -1038,13 +1038,14 @@\n mpe%C3%A3o%22)%0A\n+%09\n %09%7D%0A%7D%0A\n"
        },
        {
            "label": "2025-06-14_17-31-00",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc timesToList() *Queue[string] {\n\ttimes := []string{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"}\n\tq := NewQueue[string]()\n\tfor _, time := range times {\n\t\tq.Enqueue(time)\n\t}\n\treturn q\n}\n\nfunc processarChaves(times *Queue[string], resultados [][2]int) string {\n\tfor _, resultado := range resultados {\n\t\ttime1 := times.Dequeue()\n\t\ttime2 := times.Dequeue()\n\n\t\tif resultado[0] > resultado[1] {\n\t\t\ttimes.Enqueue(time1)\n\t\t} else {\n\t\t\ttimes.Enqueue(time2)\n\t\t}\n\n\t}\n\treturn string(times.Dequeue())\n\n}\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tcampeao := \"\"\n\tresultado := make([][2]int, 0, 15)\n\n\tfor scanner.Scan() {\n\t\tpartes := strings.Fields(scanner.Text())\n\t\tgol1, _ := strconv.Atoi(partes[0])\n\t\tgol2, _ := strconv.Atoi(partes[1])\n\t\tresultado = append(resultado, [2]int{gol1, gol2})\n\n\t}\n\tcampeao += processarChaves(timesToList(), resultado)\n\n\tif campeao != \"\" {\n\t\tfmt.Println(campeao)\n\t} else {\n\t\tprintln(\"N\u00e3o h\u00e1 campe\u00e3o\")\n\t}\n}\n"
        }
    ]
}