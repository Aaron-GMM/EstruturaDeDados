{
    "patches": [
        {
            "label": "2025-04-30_11-00-53",
            "content": "@@ -956,297 +956,8 @@\n e%0A%7D%0A\n-%0A%0A%0Afunc (v *Vector) Insert(index, value int) error %7B%0A%09if index %3C 0 %7C%7C index %3E v.size %7B%0A%09%09return fmt.Errorf(%22index out of range%22)%0A%09%7D%0A%09if v.size == v.capacity %7B%0A%09%09v.Reserve(max(1, v.capacity*2))%0A%09%7D%0A%09copy(v.data%5Bindex+1:%5D, v.data%5Bindex:v.size%5D)%0A%09v.data%5Bindex%5D = value%0A%09v.size++%0A%09return nil%0A%7D%0A\n func\n@@ -1671,16 +1671,18 @@\n rt%22:%0A%09%09%09\n+//\n  index, \n@@ -1708,24 +1708,26 @@\n arts%5B1%5D)%0A%09%09%09\n+//\n  value, _ :=\n@@ -1753,16 +1753,18 @@\n %5B2%5D)%0A%09%09%09\n+//\n  err := \n@@ -1789,16 +1789,18 @@\n lue)%0A%09%09%09\n+//\n  if err \n@@ -1811,16 +1811,18 @@\n il %7B%0A%09%09%09\n+//\n  %09fmt.Pr\n@@ -1831,24 +1831,26 @@\n tln(err)%0A%09%09%09\n+//\n  %7D%0A%09%09case %22e\n"
        },
        {
            "label": "2025-04-30_11-10-42",
            "content": "@@ -3015,16 +3015,18 @@\n ve%22:%0A%09%09%09\n+//\n  newCapa\n@@ -3062,16 +3062,18 @@\n %5B1%5D)%0A%09%09%09\n+//\n  v.Reser\n"
        },
        {
            "label": "2025-04-30_11-26-32",
            "content": "@@ -2635,24 +2635,26 @@\n e %22get%22:%0A%09%09%09\n+//\n  index, _ :=\n@@ -2672,32 +2672,34 @@\n oi(parts%5B1%5D)%0A%09%09%09\n+//\n  value, err := v\n@@ -2708,24 +2708,26 @@\n t(index)%0A%09%09%09\n+//\n  if err != n\n@@ -2726,32 +2726,34 @@\n err != nil %7B%0A%09%09%09\n+//\n  %09fmt.Println(er\n@@ -2758,16 +2758,18 @@\n err)%0A%09%09%09\n+//\n  %7D else \n@@ -2769,24 +2769,26 @@\n %7D else %7B%0A%09%09%09\n+//\n  %09fmt.Printl\n@@ -2791,32 +2791,34 @@\n intln(value)%0A%09%09%09\n+//\n  %7D%0A%09%09case %22set%22:\n"
        },
        {
            "label": "2025-04-30_11-28-56",
            "content": "@@ -2631,34 +2631,32 @@\n %09case %22get%22:%0A%09%09%09\n-//\n  index, _ := str\n@@ -2670,34 +2670,32 @@\n oi(parts%5B1%5D)%0A%09%09%09\n-//\n  value, err := v\n@@ -2700,34 +2700,32 @@\n  v.At(index)%0A%09%09%09\n-//\n  if err != nil %7B\n@@ -2720,34 +2720,32 @@\n err != nil %7B%0A%09%09%09\n-//\n  %09fmt.Println(er\n@@ -2746,26 +2746,24 @@\n tln(err)%0A%09%09%09\n-//\n  %7D else %7B%0A%09%09\n@@ -2755,34 +2755,32 @@\n %09%09%09 %7D else %7B%0A%09%09%09\n-//\n  %09fmt.Println(va\n@@ -2783,26 +2783,24 @@\n n(value)%0A%09%09%09\n-//\n  %7D%0A%09%09case %22s\n"
        },
        {
            "label": "2025-04-30_11-30-22",
            "content": "@@ -1244,198 +1244,8 @@\n il%0A%7D\n-%0A%0Afunc (v *Vector) Erase(index int) error%7B%0A%09if index%3C0 %7C%7C index %3E v.size%7B%0A%09%09return fmt.Errorf(%22index out of range%22)%0A%09%7D%0A%09%0A%09copy(v.data%5Bindex:%5D, v.data%5Bindex+1:v.size%5D)%0A%09v.size--%0A%09return nil%0A%7D\n %0Afun\n@@ -2132,24 +2132,26 @@\n %22erase%22:%0A%09%09%09\n+//\n  index, _ :=\n@@ -2173,24 +2173,26 @@\n arts%5B1%5D)%0A%09%09%09\n+//\n  err := v.Er\n@@ -2201,24 +2201,26 @@\n e(index)%0A%09%09%09\n+//\n  if err != n\n@@ -2219,32 +2219,34 @@\n err != nil %7B%0A%09%09%09\n+//\n  %09fmt.Println(er\n@@ -2243,32 +2243,34 @@\n Println(err)%0A%09%09%09\n+//\n  %7D%0A%09%09case %22index\n"
        },
        {
            "label": "2025-05-03_14-37-19",
            "content": "@@ -1355,24 +1355,26 @@\n  range%22)%0A%09%7D%0A\n+%09%0A\n %09copy(v.data\n@@ -1434,332 +1434,8 @@\n il%0A%7D\n-%0A%0Afunc (v *Vector) Set(index, value int) error %7B%0A%09if index %3C 0 %7C%7C index %3E= v.size %7B%0A%09%09return fmt.Errorf(%22index out of range%22)%0A%09%7D%0A%09v.data%5Bindex%5D = value%0A%09return nil%0A%7D%0Afunc (v *Vector) Get(index int) (int, error) %7B%0A%09if index %3C 0 %7C%7C index %3E= v.size %7B%0A%09%09return 0, fmt.Errorf(%22index out of range%22)%0A%09%7D%0A%09return v.data%5Bindex%5D, nil%0A%7D\n %0Afun\n@@ -2819,16 +2819,19 @@\n et%22:%0A%09%09%09\n+// \n index, _\n@@ -2860,16 +2860,19 @@\n %5B1%5D)%0A%09%09%09\n+// \n value, e\n@@ -2879,18 +2879,17 @@\n rr := v.\n-Ge\n+A\n t(index)\n@@ -2892,16 +2892,19 @@\n dex)%0A%09%09%09\n+// \n if err !\n@@ -2910,24 +2910,27 @@\n != nil %7B%0A%09%09%09\n+// \n %09fmt.Println\n@@ -2938,16 +2938,19 @@\n err)%0A%09%09%09\n+// \n %7D else %7B\n@@ -2953,16 +2953,19 @@\n se %7B%0A%09%09%09\n+// \n %09fmt.Pri\n@@ -2979,16 +2979,19 @@\n lue)%0A%09%09%09\n+// \n %7D%0A%09%09case\n@@ -2997,24 +2997,26 @@\n e %22set%22:%0A%09%09%09\n+//\n  index, _ :=\n@@ -3034,32 +3034,34 @@\n oi(parts%5B1%5D)%0A%09%09%09\n+//\n  value, _ := str\n@@ -3075,32 +3075,34 @@\n oi(parts%5B2%5D)%0A%09%09%09\n+//\n  err := v.Set(in\n@@ -3108,32 +3108,34 @@\n ndex, value)%0A%09%09%09\n+//\n  if err != nil %7B\n@@ -3130,32 +3130,34 @@\n err != nil %7B%0A%09%09%09\n+//\n  %09fmt.Println(er\n@@ -3166,14 +3166,18 @@\n %0A%09%09%09\n+//\n  %7D%0A%09%09%09\n+//\n  %0A%09%09\n"
        },
        {
            "label": "2025-05-03_14-41-04",
            "content": "@@ -1611,17 +1611,18 @@\n Vector) \n-A\n+Ge\n t(index \n@@ -3195,17 +3195,18 @@\n rr := v.\n-A\n+Ge\n t(index)\n"
        },
        {
            "label": "2025-05-03_14-41-35",
            "content": "@@ -1756,85 +1756,8 @@\n l%0A%7D%0A\n-%0Afunc (v *Vector) Clear() %7B%0A%09v.data = make(%5B%5Dint, v.capacity)%0A%09v.size = 0%0A%7D%0A%0A\n func\n@@ -3059,16 +3059,18 @@\n ar%22:%0A%09%09%09\n+//\n  v.Clear\n"
        },
        {
            "label": "2025-05-03_20-12-41",
            "content": "@@ -957,204 +957,8 @@\n %0A%7D%0A%0A\n-func (v *Vector) PopBack() (%5B%5Dint, error) %7B%0A%09if v.size == 0 %7B%0A%09%09return 0, fmt.Errorf(%22vector is empty%22)%0A%09%7D%0A%09if len(v.data) %3E 0 %7B%0A%09%09v.data = v.data%5B:v.size-1%5D%0A%09%7D%0A%0A%09v.size--%0A%0A%09return v.data%5B%5D, nil%0A%7D\n %0A%0Afu\n"
        },
        {
            "label": "2025-05-03_20-22-47",
            "content": "@@ -980,22 +980,30 @@\n pBack() \n+(%5B%5Dint,\n  error\n+)\n  %7B%0A%09if v\n@@ -1024,16 +1024,18 @@\n %09return \n+0,\n  fmt.Err\n@@ -1114,16 +1114,17 @@\n e-1%5D%0A%09%7D%0A\n+%0A\n %09v.size-\n@@ -1125,24 +1125,25 @@\n .size--%0A\n+%0A\n %09return \n  nil%0A%7D%0A%0A\n@@ -1134,16 +1134,25 @@\n %09return \n+v.data%5B%5D,\n  nil%0A%7D%0A%0A\n@@ -2644,24 +2644,26 @@\n e %22pop%22:%0A%09%09%09\n+//\n  err := v.Po\n@@ -2669,24 +2669,26 @@\n opBack()%0A%09%09%09\n+//\n  if err != n\n@@ -2687,32 +2687,34 @@\n err != nil %7B%0A%09%09%09\n+//\n  %09fmt.Println(er\n@@ -2718,16 +2718,19 @@\n (err)%0A%09%09\n+%09//\n  %7D%0A%09%09cas\n"
        },
        {
            "label": "2025-05-03_20-24-27",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\ntype Vector struct {\n\tdata     []int\n\tsize     int\n\tcapacity int\n}\nfunc (v *Vector) Reserve(capacity int) {\n\tif capacity < v.size{\n\t\treturn\n\t}\n\tnovo := make([]int, capacity)\n\tfor i := range v.size{\n\t\tnovo[i] = v.data[i]\n\t}\n\tv.capacity = capacity\n\tv.data = novo\n\n}\nfunc (v *Vector) PushBack(value int) {\n\tif v.size == v.capacity {\n\t\tv.Reserve(max(1, v.capacity*2))\n\t}\n\tv.data[v.size] = value\n\tv.size++\n}\nfunc (v *Vector) String() string {\n\tsaida := \"[\"\n\tfor i := range v.size {\n\t\tif i != 0 {\n\t\t\tsaida += \", \"\n\t\t}\n\t\tsaida += fmt.Sprint(v.data[i])\n\t}\n\treturn saida + \"]\"\n}\nfunc (v *Vector) Status() string {\n\treturn fmt.Sprintf(\"size:%d capacity:%d\", v.size, v.capacity)\n}\nfunc NewVector(capacity int) *Vector {\n\tif capacity < 0 {\n\t\tcapacity = 0\n\t}\n\treturn &Vector{\n\t\tdata:     make([]int, capacity),\n\t\tsize:     0,\n\t\tcapacity: capacity,\n\t}\n}\nfunc (v *Vector) GetSize() int {\n\treturn v.size\n}\n\nfunc (v *Vector) PopBack()  error {\n\tif v.size == 0 {\n\t\treturn  fmt.Errorf(\"vector is empty\")\n\t}\n\tif len(v.data) > 0 {\n\t\tv.data = v.data[:v.size-1]\n\t}\n\tv.size--\n\treturn  nil\n}\n\nfunc (v *Vector) Insert(index, value int) error {\n\tif index < 0 || index > v.size {\n\t\treturn fmt.Errorf(\"index out of range\")\n\t}\n\tif v.size == v.capacity {\n\t\tv.Reserve(max(1, v.capacity*2))\n\t}\n\tcopy(v.data[index+1:], v.data[index:v.size])\n\tv.data[index] = value\n\tv.size++\n\treturn nil\n}\n\nfunc (v *Vector) Erase(index int) error{\n\tif index<0 || index > v.size{\n\t\treturn fmt.Errorf(\"index out of range\")\n\t}\n\tcopy(v.data[index:], v.data[index+1:v.size])\n\tv.size--\n\treturn nil\n}\n\nfunc (v *Vector) Set(index, value int) error {\n\tif index < 0 || index >= v.size {\n\t\treturn fmt.Errorf(\"index out of range\")\n\t}\n\tv.data[index] = value\n\treturn nil\n}\nfunc (v *Vector) At(index int) (int, error) {\n\tif index < 0 || index >= v.size {\n\t\treturn 0, fmt.Errorf(\"index out of range\")\n\t}\n\treturn v.data[index], nil\n}\n\nfunc (v *Vector) Clear() {\n\tv.data = make([]int, v.capacity)\n\tv.size = 0\n}\n\nfunc main() {\n\tvar line, cmd string\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\t\tv := NewVector(0)\n\t\t\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline = scanner.Text()\n\t\tfmt.Println(line)\n\t\tparts := strings.Fields(line)\n\t\tif len(parts) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcmd = parts[0]\n\n\t\tswitch cmd {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"init\":\n\t\t\t value, _ := strconv.Atoi(parts[1])\n\t\t\t v = NewVector(value)\n\t\tcase \"push\":\n\t\t\t for _, part := range parts[1:] {\n\t\t\t \tvalue, _ := strconv.Atoi(part)\n\t\t\t \tv.PushBack(value)\n\t\t\t }\n\t\tcase \"show\":\n\t\t\t fmt.Println(v)\n\t\tcase \"status\":\n\t\t\t fmt.Println(v.Status())\n\t\tcase \"pop\":\n\t\t\t err := v.PopBack()\n\t\t\t if err != nil {\n\t\t\t \tfmt.Println(err)\n\t\t }\n\t\tcase \"insert\":\n\t\t\t index, _ := strconv.Atoi(parts[1])\n\t\t\t value, _ := strconv.Atoi(parts[2])\n\t\t\t err := v.Insert(index, value)\n\t\t\t if err != nil {\n\t\t\t \tfmt.Println(err)\n\t\t\t }\n\t\tcase \"erase\":\n\t\t\t index, _ := strconv.Atoi(parts[1])\n\t\t\t err := v.Erase(index)\n\t\t\t if err != nil {\n\t\t\t \tfmt.Println(err)\n\t\t\t }\n\t\tcase \"indexOf\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// index := v.IndexOf(value)\n\t\t\t// fmt.Println(index)\n\t\tcase \"contains\":\n\t\t\t// value, _ := strconv.Atoi(parts[1])\n\t\t\t// if v.Contains(value) {\n\t\t\t// \tfmt.Println(\"true\")\n\t\t\t// } else {\n\t\t\t// \tfmt.Println(\"false\")\n\t\t\t// }\n\t\tcase \"clear\":\n\t\t\t v.Clear()\n\t\tcase \"capacity\":\n\t\t\t// fmt.Println(v.Capacity())\n\t\tcase \"get\":\n\t\t\tindex, _ := strconv.Atoi(parts[1])\n\t\t\tvalue, err := v.At(index)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t} else {\n\t\t\t\tfmt.Println(value)\n\t\t\t}\n\t\tcase \"set\":\n\t\t\t index, _ := strconv.Atoi(parts[1])\n\t\t\t value, _ := strconv.Atoi(parts[2])\n\t\t\t err := v.Set(index, value)\n\t\t\t if err != nil {\n\t\t\t \tfmt.Println(err)\n\t\t\t }\n\t\t\t \n\t\tcase \"reserve\":\n\t\t\t newCapacity, _ := strconv.Atoi(parts[1])\n\t\t\t v.Reserve(newCapacity)\n\t\tcase \"sort\":\n\t\t\t// v.Sort()\n\t\tcase \"sorted\":\n\t\t\t// fmt.Println(\"[\" + Join(v.Sorted(), \", \") + \"]\")\n\t\tcase \"reverse\":\n\t\t\t// v.Reverse()\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n"
        }
    ]
}