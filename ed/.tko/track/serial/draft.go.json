{
    "patches": [
        {
            "label": "2025-06-14_18-18-30",
            "content": "@@ -18,60 +18,13 @@\n ort \n-(%0A%09%22bufio%22%0A%09%22fmt%22%0A%09//%22go/scanner%22%0A%09%22os%22%0A%09%22strings%22%0A)\n+%22fmt%22\n %0A%0Aty\n@@ -128,24 +128,37 @@\n Node%0A%7D%0A%0Afunc\n+ (node *Node)\n  NewNode(val\n@@ -262,997 +262,24 @@\n %0A%7D%0A%0A\n-func NewBinaryTree(  ) *BinaryTree %7B%0A    return &BinaryTree%7B%0A        root: nil,%0A    %7D%0A%7D%0A%0Afunc inserir(node *Node, novo *Node) %7B%0A    if novo.valor %3C node.valor %7B%0A        if node.esquerda == nil %7B%0A            node.esquerda = novo%0A        %7D else %7B%0A            inserir(node.esquerda, novo)%0A        %7D%0A    %7D else if novo.valor %3E node.valor %7B%0A        if node.direita == nil %7B%0A            node.direita = novo%0A        %7D else %7B%0A            inserir(node.direita, novo)%0A        %7D%0A    %7D%0A%7D%0A%0A%0Afunc main() %7B%0A%09scanner := bufio.NewScanner(os.Stdin)%0A    if scanner.Scan()%7B%0A        linha := scanner.Text()%0A        bt := NewBinaryTree()%0A        for _, v := range strings.Split(linha, %22 %22) %7B%0A            if v == %220%22 %7B%0A                break%0A            %7D%0A            valor := 0%0A            fmt.Sscanf(v, %22%25d%22, &valor)%0A            node := NewNode(valor)%0A            if bt.root == nil %7B%0A                bt.root = node%0A            %7D else %7B%0A                inserir(bt.root, node)%0A            %7D%0A        %7D%0A    %7D%0A    //\n+%0Afunc main() %7B%0A%09\n fmt.\n"
        },
        {
            "label": "2025-06-14_18-28-43",
            "content": "@@ -770,18 +770,16 @@\n   %7D%0A%7D%0A%0A%0A\n-%0A%0A\n func mai\n@@ -1273,19 +1273,8 @@\n   %7D%0A\n-%0A        %0A%0A\n     \n"
        },
        {
            "label": "2025-06-17_10-14-29",
            "content": "@@ -773,161 +773,8 @@\n %0A%7D%0A%0A\n-func bshows(node *Node)%7B%0A    if node == nil %7B%0A        return%0A    %7D%0A    bshows(node.esquerda)%0A    fmt.Printf(%22%25d %22, node.valor)%0A    bshows(node.direita)%0A%7D\n %0A%0A%0Af\n@@ -1274,32 +1274,8 @@\n    %7D\n-%0A        bshows(bt.root)\n %0A%0A  \n"
        },
        {
            "label": "2025-06-17_10-16-02",
            "content": "@@ -10,81 +10,127 @@\n ain%0A\n+%0A\n import \n-%22fmt%22%0Atype Node struct %7B%0A    value int   %0A    next  *Node%0A    prev\n+(%0A%09%22bufio%22%0A%09%22fmt%22%0A%09//%22go/scanner%22%0A%09%22os%22%0A%09%22strings%22%0A)%0A%0Atype Node struct %7B%0A%09valor    int%0A%09esquerda *Node%0A%09direita\n   *N\n@@ -139,16 +139,20 @@\n e%0A%7D%0A\n-%0A\n type B\n-t\n+inaryT\n ree \n@@ -161,80 +161,151 @@\n ruct\n+ \n %7B%0A\n-    value\n+%09root *Node%0A%7D%0A%0Afunc NewNode(valor\n  int\n-%0A    root *\n+) *Node %7B%0A%09return &\n Node\n-%0A\n+%7B%0A \n     \n-left *Node%0A    right *Node\n+   valor: valor,%0A        esquerda: nil,%0A        direita: nil%7D\n %0A%7D%0A\n+%0A\n func New\n Node\n@@ -304,168 +304,770 @@\n  New\n-Node(value int) *Node %7B%0A    return &Node%7B%0A        value: value,%0A        next:  nil,%0A        prev:  nil,%7D%0A%7D%0A%0Afunc NewBtree(value int) *Btree %7B%0A    return &Btree%7B\n+BinaryTree(  ) *BinaryTree %7B%0A    return &BinaryTree%7B%0A        root: nil,%0A    %7D%0A%7D%0A%0Afunc inserir(node *Node, novo *Node) %7B%0A    if novo.valor %3C node.valor %7B%0A        if node.esquerda == nil %7B%0A            node.esquerda = novo%0A        %7D else %7B%0A            inserir(node.esquerda, novo)%0A        %7D%0A    %7D else if novo.valor %3E node.valor %7B%0A        if node.direita == nil %7B%0A            node.direita = novo%0A        %7D else %7B%0A            inserir(node.direita, novo)%0A        %7D%0A    %7D%0A%7D%0A%0Afunc bshows(node *Node)%7B%0A    if node == nil %7B%0A        return%0A    %7D%0A    bshows(node.esquerda)%0A    fmt.Printf(%22%25d %22, node.valor)%0A    bshows(node.direita)%0A%7D%0A%0A%0Afunc main() %7B%0A%09scanner := bufio.NewScanner(os.Stdin)%0A    if scanner.Scan()%7B%0A        linha := scanner.Text()%0A        bt := NewBinaryTree()\n %0A   \n@@ -1075,36 +1075,198 @@\n     \n-value: value,%0A        root: \n+for _, v := range strings.Split(linha, %22 %22) %7B%0A            if v == %220%22 %7B%0A                break%0A            %7D%0A            valor := 0%0A            fmt.Sscanf(v, %22%25d%22, &valor)%0A            node :=\n  New\n@@ -1277,21 +1277,23 @@\n (val\n-ue),%0A\n+or)%0A   \n         \n left\n@@ -1292,68 +1292,191 @@\n     \n-left:  nil,%0A        right: nil,%0A    %7D%0A%7D%0A%0A%0Afunc main() %7B\n+ if bt.root == nil %7B%0A                bt.root = node%0A            %7D else %7B%0A                inserir(bt.root, node)%0A            %7D%0A        %7D%0A        bshows(bt.root)%0A%0A        %0A%0A    %7D\n %0A    \n+//\n fmt.\n"
        },
        {
            "label": "2025-06-18_11-21-43",
            "content": "@@ -38,25 +38,25 @@\n truct %7B%0A    \n-V\n+v\n alue int %0A  \n@@ -56,17 +56,20 @@\n int \n+  \n %0A    \n-Left\n+next \n  *No\n@@ -75,21 +75,21 @@\n ode%0A    \n-Right\n+prev \n  *Node%0A%7D\n@@ -89,16 +89,17 @@\n *Node%0A%7D%0A\n+%0A\n type Btr\n@@ -111,18 +111,62 @@\n ruct\n- \n %7B%0A    \n-Roo\n+value int%0A    root *Node%0A    left *Node%0A    righ\n t *N\n@@ -233,9 +233,9 @@\n     \n-V\n+v\n alue\n@@ -255,11 +255,11 @@\n     \n-Lef\n+nex\n t:  \n@@ -275,27 +275,23 @@\n     \n-Right:\n+prev: \n  nil,\n+%7D\n %0A\n-    \n %7D%0A\n-%7D\n %0Afun\n@@ -301,16 +301,25 @@\n ewBtree(\n+value int\n ) *Btree\n@@ -352,11 +352,85 @@\n     \n-Roo\n+value: value,%0A        root:  NewNode(value),%0A        left:  nil,%0A        righ\n t: n\n@@ -441,16 +441,18 @@\n     %7D%0A%7D%0A\n+%0A%0A\n func mai\n"
        },
        {
            "label": "2025-06-18_22-58-23",
            "content": "package main\nimport \"fmt\"\ntype Node struct {\n    Value int \n    Left *Node\n    Right *Node\n}\ntype Btree struct {\n    Root *Node\n}\nfunc NewNode(value int) *Node {\n    return &Node{\n        Value: value,\n        Left:  nil,\n        Right: nil,\n    }\n}\nfunc NewBtree() *Btree {\n    return &Btree{\n        Root: nil,\n    }\n}\nfunc main() {\n    fmt.Println(\"qxcode\")\n}\n"
        }
    ]
}