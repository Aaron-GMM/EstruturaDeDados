{
    "patches": [
        {
            "label": "2025-06-14_18-18-30",
            "content": "@@ -18,60 +18,13 @@\n ort \n-(%0A%09%22bufio%22%0A%09%22fmt%22%0A%09//%22go/scanner%22%0A%09%22os%22%0A%09%22strings%22%0A)\n+%22fmt%22\n %0A%0Aty\n@@ -128,24 +128,37 @@\n Node%0A%7D%0A%0Afunc\n+ (node *Node)\n  NewNode(val\n@@ -262,997 +262,24 @@\n %0A%7D%0A%0A\n-func NewBinaryTree(  ) *BinaryTree %7B%0A    return &BinaryTree%7B%0A        root: nil,%0A    %7D%0A%7D%0A%0Afunc inserir(node *Node, novo *Node) %7B%0A    if novo.valor %3C node.valor %7B%0A        if node.esquerda == nil %7B%0A            node.esquerda = novo%0A        %7D else %7B%0A            inserir(node.esquerda, novo)%0A        %7D%0A    %7D else if novo.valor %3E node.valor %7B%0A        if node.direita == nil %7B%0A            node.direita = novo%0A        %7D else %7B%0A            inserir(node.direita, novo)%0A        %7D%0A    %7D%0A%7D%0A%0A%0Afunc main() %7B%0A%09scanner := bufio.NewScanner(os.Stdin)%0A    if scanner.Scan()%7B%0A        linha := scanner.Text()%0A        bt := NewBinaryTree()%0A        for _, v := range strings.Split(linha, %22 %22) %7B%0A            if v == %220%22 %7B%0A                break%0A            %7D%0A            valor := 0%0A            fmt.Sscanf(v, %22%25d%22, &valor)%0A            node := NewNode(valor)%0A            if bt.root == nil %7B%0A                bt.root = node%0A            %7D else %7B%0A                inserir(bt.root, node)%0A            %7D%0A        %7D%0A    %7D%0A    //\n+%0Afunc main() %7B%0A%09\n fmt.\n",
            "lines": "14"
        },
        {
            "label": "2025-06-14_18-28-43",
            "content": "@@ -770,18 +770,16 @@\n   %7D%0A%7D%0A%0A%0A\n-%0A%0A\n func mai\n@@ -1273,19 +1273,8 @@\n   %7D%0A\n-%0A        %0A%0A\n     \n",
            "lines": "8"
        },
        {
            "label": "2025-06-17_10-14-29",
            "content": "@@ -773,161 +773,8 @@\n %0A%7D%0A%0A\n-func bshows(node *Node)%7B%0A    if node == nil %7B%0A        return%0A    %7D%0A    bshows(node.esquerda)%0A    fmt.Printf(%22%25d %22, node.valor)%0A    bshows(node.direita)%0A%7D\n %0A%0A%0Af\n@@ -1274,32 +1274,8 @@\n    %7D\n-%0A        bshows(bt.root)\n %0A%0A  \n",
            "lines": "8"
        },
        {
            "label": "2025-06-17_10-16-02",
            "content": "@@ -10,81 +10,127 @@\n ain%0A\n+%0A\n import \n-%22fmt%22%0Atype Node struct %7B%0A    value int   %0A    next  *Node%0A    prev\n+(%0A%09%22bufio%22%0A%09%22fmt%22%0A%09//%22go/scanner%22%0A%09%22os%22%0A%09%22strings%22%0A)%0A%0Atype Node struct %7B%0A%09valor    int%0A%09esquerda *Node%0A%09direita\n   *N\n@@ -139,16 +139,20 @@\n e%0A%7D%0A\n-%0A\n type B\n-t\n+inaryT\n ree \n@@ -161,80 +161,151 @@\n ruct\n+ \n %7B%0A\n-    value\n+%09root *Node%0A%7D%0A%0Afunc NewNode(valor\n  int\n-%0A    root *\n+) *Node %7B%0A%09return &\n Node\n-%0A\n+%7B%0A \n     \n-left *Node%0A    right *Node\n+   valor: valor,%0A        esquerda: nil,%0A        direita: nil%7D\n %0A%7D%0A\n+%0A\n func New\n Node\n@@ -304,168 +304,770 @@\n  New\n-Node(value int) *Node %7B%0A    return &Node%7B%0A        value: value,%0A        next:  nil,%0A        prev:  nil,%7D%0A%7D%0A%0Afunc NewBtree(value int) *Btree %7B%0A    return &Btree%7B\n+BinaryTree(  ) *BinaryTree %7B%0A    return &BinaryTree%7B%0A        root: nil,%0A    %7D%0A%7D%0A%0Afunc inserir(node *Node, novo *Node) %7B%0A    if novo.valor %3C node.valor %7B%0A        if node.esquerda == nil %7B%0A            node.esquerda = novo%0A        %7D else %7B%0A            inserir(node.esquerda, novo)%0A        %7D%0A    %7D else if novo.valor %3E node.valor %7B%0A        if node.direita == nil %7B%0A            node.direita = novo%0A        %7D else %7B%0A            inserir(node.direita, novo)%0A        %7D%0A    %7D%0A%7D%0A%0Afunc bshows(node *Node)%7B%0A    if node == nil %7B%0A        return%0A    %7D%0A    bshows(node.esquerda)%0A    fmt.Printf(%22%25d %22, node.valor)%0A    bshows(node.direita)%0A%7D%0A%0A%0Afunc main() %7B%0A%09scanner := bufio.NewScanner(os.Stdin)%0A    if scanner.Scan()%7B%0A        linha := scanner.Text()%0A        bt := NewBinaryTree()\n %0A   \n@@ -1075,36 +1075,198 @@\n     \n-value: value,%0A        root: \n+for _, v := range strings.Split(linha, %22 %22) %7B%0A            if v == %220%22 %7B%0A                break%0A            %7D%0A            valor := 0%0A            fmt.Sscanf(v, %22%25d%22, &valor)%0A            node :=\n  New\n@@ -1277,21 +1277,23 @@\n (val\n-ue),%0A\n+or)%0A   \n         \n left\n@@ -1292,68 +1292,191 @@\n     \n-left:  nil,%0A        right: nil,%0A    %7D%0A%7D%0A%0A%0Afunc main() %7B\n+ if bt.root == nil %7B%0A                bt.root = node%0A            %7D else %7B%0A                inserir(bt.root, node)%0A            %7D%0A        %7D%0A        bshows(bt.root)%0A%0A        %0A%0A    %7D\n %0A    \n+//\n fmt.\n",
            "lines": "56"
        },
        {
            "label": "2025-06-18_11-21-43",
            "content": "@@ -38,25 +38,25 @@\n truct %7B%0A    \n-V\n+v\n alue int %0A  \n@@ -56,17 +56,20 @@\n int \n+  \n %0A    \n-Left\n+next \n  *No\n@@ -75,21 +75,21 @@\n ode%0A    \n-Right\n+prev \n  *Node%0A%7D\n@@ -89,16 +89,17 @@\n *Node%0A%7D%0A\n+%0A\n type Btr\n@@ -111,18 +111,62 @@\n ruct\n- \n %7B%0A    \n-Roo\n+value int%0A    root *Node%0A    left *Node%0A    righ\n t *N\n@@ -233,9 +233,9 @@\n     \n-V\n+v\n alue\n@@ -255,11 +255,11 @@\n     \n-Lef\n+nex\n t:  \n@@ -275,27 +275,23 @@\n     \n-Right:\n+prev: \n  nil,\n+%7D\n %0A\n-    \n %7D%0A\n-%7D\n %0Afun\n@@ -301,16 +301,25 @@\n ewBtree(\n+value int\n ) *Btree\n@@ -352,11 +352,85 @@\n     \n-Roo\n+value: value,%0A        root:  NewNode(value),%0A        left:  nil,%0A        righ\n t: n\n@@ -441,16 +441,18 @@\n     %7D%0A%7D%0A\n+%0A%0A\n func mai\n",
            "lines": "62"
        },
        {
            "label": "2025-06-18_22-58-23",
            "content": "@@ -10,49 +10,21 @@\n ain%0A\n-%0A\n import \n-(%0A%09\n %22fmt%22%0A\n-%09%22strconv%22%0A%09%22strings%22%0A)%0A\n type\n@@ -323,1400 +323,41 @@\n unc \n-NewBtreeSerial(serial string) *Btree%7B%0A    bt:= &Btree%7B%7D%0A    parts := strings.Fields(serial)%0A    index := 0%0A    var buildTree func() *Node%0A    buildTree = func() *Node %7B%0A        if index %3E= len(parts)%7B%0A            return nil%0A        %7D%0A        part := parts%5Bindex%5D%0A        index++%0A        if part == %22#%22 %7B%0A            return nil%0A        %7D%0A        value, err := strconv.Atoi(part)%0A%0A        if err != nil %7B%0A            %09fmt.Printf(%22Error converting %25s to int: %25v%5Cn%22, part, err)%0A%09%09%09return nil%0A%09%09%7D%0A        node := NewNode(value)%0A%09%09node.Left = buildTree()%0A%09%09node.Right = buildTree()%0A%0A%09%09return node%0A    %7D%0A    bt.Root = buildTree()%0A    return bt%0A%7D%0Afunc (bt *BTree) recursiveBShow(node *Node, heranca string) %7B%0A%09if node != nil && (node.Left != nil %7C%7C node.Right != nil) %7B%0A%09%09bt.recursiveBShow(node.Left, heranca+%22l%22)%0A%09%7D%0A%0A%09for i := 0; i %3C len(heranca)-1; i++ %7B%0A%09%09if heranca%5Bi%5D != heranca%5Bi+1%5D %7B%0A%09%09%09fmt.Print(%22%E2%94%82   %22)%0A%09%09%7D else %7B%0A%09%09%09fmt.Print(%22    %22)%0A%09%09%7D%0A%09%7D%0A%0A%09if heranca != %22%22 %7B%0A%09%09if heranca%5Blen(heranca)-1%5D == 'l' %7B%0A%09%09%09fmt.Print(%22%E2%94%8C%E2%94%80%E2%94%80%E2%94%80%22)%0A%09%09%7D else %7B%0A%09%09%09fmt.Print(%22%E2%94%94%E2%94%80%E2%94%80%E2%94%80%22)%0A%09%09%7D%0A%09%7D%0A%0A%09if node == nil %7B%0A%09%09fmt.Println(%22#%22)%0A%09%09return%0A%09%7D%0A%0A%09fmt.Println(node.Value)%0A%0A%09if node != nil && (node.Left != nil %7C%7C node.Right != nil) %7B%0A%09%09bt.recursiveBShow(node.Right, heranca+%22r%22)%0A%09%7D%0A%7D%0Afunc (bt *Btree) bShow() %7B%0A    bt.recursiveBShow(bt.Root, %22%22)%0A%7D%0Afunc (bt *B)%0Afunc main() %7B%0A    var line string%0A    fmt.Scanln(&line)%0A    bt := \n+main() %7B%0A    fmt.Println(%22qxcode%22)\n %0A%7D%0A\n",
            "lines": "25"
        },
        {
            "label": "2025-07-08_11-14-23",
            "content": "@@ -989,33 +989,33 @@\n bt%0A%7D%0Afunc (bt *B\n-t\n+T\n ree) recursiveBS\n@@ -1498,36 +1498,12 @@\n node\n-.Left != nil %7C%7C node.Right!=\n+ != \n nil \n@@ -1676,335 +1676,9 @@\n t *B\n-tree) Destroy() %7B bt.Root = nil%7D%0A%0Afunc (bt *Btree) ShowInOrder() %7B%0A%09fmt.Print(%22%5B %22)%0A%09bt.recursiveShowInOrder(bt.Root)%0A%09fmt.Println(%22%5D%22)%0A%7D%0A%0Afunc (bt *Btree) recursiveShowInOrder(node *Node) %7B%0A%09if node == nil %7B%0A%09%09return%0A%09%7D%0A%09bt.recursiveShowInOrder(node.Left)%0A%09fmt.Printf(%22%25d %22, node.Value)%0A%09bt.recursiveShowInOrder(node.Right)%0A%7D%0A\n+)\n %0Afun\n@@ -1744,63 +1744,7 @@\n  := \n-NewBtreeSerial(line)%0A    bt.ShowInOrder()%0A    bt.bShow()\n %0A%7D%0A\n",
            "lines": "97"
        },
        {
            "label": "2025-07-08_11-18-07",
            "content": "@@ -2140,10 +2140,8 @@\n     \n-//\n bt.b\n",
            "lines": "115"
        },
        {
            "label": "2025-07-08_11-18-37",
            "content": "@@ -1486,36 +1486,60 @@\n Value)%0A%0A%09if node\n- != \n+.Left != nil %7C%7C node.Right!=\n nil && (node.Lef\n@@ -2136,16 +2136,18 @@\n r()%0A    \n+//\n bt.bShow\n",
            "lines": "115"
        },
        {
            "label": "2025-07-08_11-19-36",
            "content": "@@ -2116,10 +2116,8 @@\n     \n-//\n bt.b\n",
            "lines": "115"
        },
        {
            "label": "2025-07-08_11-19-45",
            "content": "@@ -1443,17 +1443,17 @@\n rintln(%22\n-0\n+#\n %22)%0A%09%09ret\n",
            "lines": "115"
        },
        {
            "label": "2025-07-08_11-22-49",
            "content": "@@ -1443,17 +1443,17 @@\n rintln(%22\n-#\n+0\n %22)%0A%09%09ret\n@@ -2060,75 +2060,8 @@\n ne)%0A\n-        fmt.Printf(%22DEBUG: String de entrada lida: '%25s'%5Cn%22, line) %0A\n     \n",
            "lines": "115"
        },
        {
            "label": "2025-07-08_11-38-13",
            "content": "@@ -47,17 +47,16 @@\n ings%22%0A)%0A\n-%0A\n type Nod\n@@ -66,17 +66,20 @@\n truct %7B%0A\n-%09\n+    \n Value in\n@@ -83,23 +83,29 @@\n  int\n-%0A%09\n+ %0A    \n Left \n- \n *Node%0A\n-%09\n+    \n Righ\n@@ -134,17 +134,20 @@\n truct %7B%0A\n-%09\n+    \n Root *No\n@@ -151,17 +151,16 @@\n *Node%0A%7D%0A\n-%0A\n func New\n@@ -179,25 +179,28 @@\n nt) *Node %7B%0A\n-%09\n+    \n return &Node\n@@ -201,18 +201,24 @@\n  &Node%7B%0A\n-%09%09\n+        \n Value: v\n@@ -223,18 +223,24 @@\n  value,%0A\n-%09%09\n+        \n Left:  n\n@@ -243,18 +243,24 @@\n :  nil,%0A\n-%09%09\n+        \n Right: n\n@@ -255,33 +255,36 @@\n     Right: nil,%0A\n-%09\n+    \n %7D%0A%7D%0Afunc NewBtre\n@@ -296,17 +296,20 @@\n Btree %7B%0A\n-%09\n+    \n return &\n@@ -315,18 +315,24 @@\n &Btree%7B%0A\n-%09%09\n+        \n Root: ni\n@@ -334,17 +334,20 @@\n t: nil,%0A\n-%09\n+    \n %7D%0A%7D%0Afunc\n@@ -387,15 +387,16 @@\n tree\n- \n %7B%0A\n-%09\n+    \n bt\n- \n := &\n@@ -403,17 +403,20 @@\n Btree%7B%7D%0A\n-%09\n+    \n parts :=\n@@ -443,61 +443,12 @@\n al)%0A\n-%09fmt.Printf(%22DEBUG: Partes da string: %25v%5Cn%22, parts)%0A%09\n+    \n inde\n@@ -454,17 +454,20 @@\n ex := 0%0A\n-%09\n+    \n var buil\n@@ -485,17 +485,20 @@\n ) *Node%0A\n-%09\n+    \n buildTre\n@@ -516,18 +516,24 @@\n *Node %7B%0A\n-%09%09\n+        \n if index\n@@ -550,101 +550,154 @@\n rts)\n- \n %7B%0A\n-%09%09%09return nil%0A%09%09%7D%0A%09%09part := parts%5Bindex%5D%0A%09%09index++%0A%09%09if part == %22#%22 %7B%0A%09%09%09return nil%0A%09%09%7D%0A%09%09\n+            return nil%0A        %7D%0A        part := parts%5Bindex%5D%0A        index++%0A        if part == %22#%22 %7B%0A            return nil%0A        %7D%0A        \n valu\n@@ -726,18 +726,24 @@\n (part)%0A%0A\n-%09%09\n+        \n if err !\n@@ -750,18 +750,28 @@\n = nil %7B%0A\n-%09%09\n+            \n %09fmt.Pri\n@@ -839,18 +839,24 @@\n nil%0A%09%09%7D%0A\n-%09%09\n+        \n node := \n@@ -938,20 +938,26 @@\n rn node%0A\n-%09%7D%0A%09\n+    %7D%0A    \n bt.Root \n@@ -970,17 +970,20 @@\n dTree()%0A\n-%09\n+    \n return b\n@@ -1624,17 +1624,20 @@\n how() %7B%0A\n-%09\n+    \n bt.recur\n@@ -1703,17 +1703,16 @@\n ot = nil\n- \n %7D%0A%0Afunc \n@@ -2014,17 +2014,20 @@\n ain() %7B%0A\n-%09\n+    \n var line\n@@ -2034,17 +2034,20 @@\n  string%0A\n-%09\n+    \n fmt.Scan\n@@ -2056,17 +2056,24 @@\n (&line)%0A\n-%09\n+        \n fmt.Prin\n@@ -2121,18 +2121,22 @@\n %22, line)\n-%0A%09\n+ %0A    \n bt := Ne\n@@ -2154,17 +2154,20 @@\n l(line)%0A\n-%09\n+    \n bt.ShowI\n@@ -2175,17 +2175,20 @@\n Order()%0A\n-%09\n+    \n //bt.bSh\n",
            "lines": "116"
        },
        {
            "label": "2025-07-08_11-39-23",
            "content": "@@ -22,26 +22,11 @@\n (%0A%09%22\n-bufio%22%0A%09%22fmt%22%0A%09%22os\n+fmt\n %22%0A%09%22\n@@ -1936,93 +1936,25 @@\n ing%0A\n-    scanner := bufio.NewScanner(os.Stdin)%0A    scanner.Scan()%0A    line = scanner.Text(\n+%09fmt.Scanln(&line\n )%0A%09f\n",
            "lines": "119"
        },
        {
            "label": "2025-07-08_11-42-17",
            "content": "@@ -424,16 +424,32 @@\n %22DEBUG: \n+Partes da string\n : %25v%5Cn%22,\n@@ -2054,16 +2054,39 @@\n %22DEBUG: \n+String de entrada lida:\n  '%25s'%5Cn%22\n",
            "lines": "123"
        },
        {
            "label": "2025-07-08_11-43-18",
            "content": "@@ -405,18 +405,16 @@\n erial)%0A%09\n-//\n fmt.Prin\n@@ -2018,18 +2018,16 @@\n .Text()%0A\n-//\n %09fmt.Pri\n@@ -2100,17 +2100,16 @@\n Order()%0A\n-%0A\n %09//bt.bS\n",
            "lines": "123"
        },
        {
            "label": "2025-07-08_11-44-13",
            "content": "@@ -1393,16 +1393,31 @@\n ue)%0A%0A%09if\n+ node != nil &&\n  (node.L\n@@ -1501,18 +1501,16 @@\n %22)%0A%09%7D%0A%7D%0A\n-//\n func (bt\n@@ -1527,16 +1527,18 @@\n Show() %7B\n+%0A%09\n bt.recur\n@@ -1559,16 +1559,17 @@\n oot, %22%22)\n+%0A\n %7D%0Afunc (\n",
            "lines": "124"
        },
        {
            "label": "2025-07-08_11-45-19",
            "content": "@@ -1390,24 +1390,25 @@\n Value)%0A%0A%09if \n+(\n node.Left !=\n@@ -1428,24 +1428,25 @@\n Right != nil\n+)\n  %7B%0A%09%09bt.recu\n",
            "lines": "122"
        },
        {
            "label": "2025-07-08_11-45-30",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node struct {\n\tValue int\n\tLeft  *Node\n\tRight *Node\n}\ntype Btree struct {\n\tRoot *Node\n}\n\nfunc NewNode(value int) *Node {\n\treturn &Node{\n\t\tValue: value,\n\t\tLeft:  nil,\n\t\tRight: nil,\n\t}\n}\nfunc NewBtree() *Btree {\n\treturn &Btree{\n\t\tRoot: nil,\n\t}\n}\nfunc NewBtreeSerial(serial string) *Btree {\n\tbt := &Btree{}\n\tparts := strings.Fields(serial)\n\t//fmt.Printf(\"DEBUG: : %v\\n\", parts)\n\tindex := 0\n\tvar buildTree func() *Node\n\tbuildTree = func() *Node {\n\t\tif index >= len(parts) {\n\t\t\treturn nil\n\t\t}\n\t\tpart := parts[index]\n\t\tindex++\n\t\tif part == \"#\" {\n\t\t\treturn nil\n\t\t}\n\t\tvalue, err := strconv.Atoi(part)\n\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error converting %s to int: %v\\n\", part, err)\n\t\t\treturn nil\n\t\t}\n\t\tnode := NewNode(value)\n\t\tnode.Left = buildTree()\n\t\tnode.Right = buildTree()\n\n\t\treturn node\n\t}\n\tbt.Root = buildTree()\n\treturn bt\n}\nfunc (bt *Btree) recursiveBShow(node *Node, heranca string) {\n\tif node != nil && (node.Left != nil || node.Right != nil) {\n\t\tbt.recursiveBShow(node.Left, heranca+\"l\")\n\t}\n\n\tfor i := 0; i < len(heranca)-1; i++ {\n\t\tif heranca[i] != heranca[i+1] {\n\t\t\tfmt.Print(\"\u2502   \")\n\t\t} else {\n\t\t\tfmt.Print(\"    \")\n\t\t}\n\t}\n\n\tif heranca != \"\" {\n\t\tif heranca[len(heranca)-1] == 'l' {\n\t\t\tfmt.Print(\"\u250c\u2500\u2500\u2500\")\n\t\t} else {\n\t\t\tfmt.Print(\"\u2514\u2500\u2500\u2500\")\n\t\t}\n\t}\n\n\tif node == nil {\n\t\tfmt.Println(\"#\")\n\t\treturn\n\t}\n\n\tfmt.Println(node.Value)\n\n\tif node.Left != nil || node.Right != nil {\n\t\tbt.recursiveBShow(node.Right, heranca+\"r\")\n\t}\n}\n//func (bt *Btree) bShow() {bt.recursiveBShow(bt.Root, \"\")}\nfunc (bt *Btree) Destroy() { bt.Root = nil }\n\nfunc (bt *Btree) ShowInOrder() {\n\tfmt.Print(\"[ \")\n\tbt.recursiveShowInOrder(bt.Root)\n\tfmt.Println(\"]\")\n}\n\nfunc (bt *Btree) recursiveShowInOrder(node *Node) {\n\tif node == nil {\n\t\treturn\n\t}\n\tbt.recursiveShowInOrder(node.Left)\n\tfmt.Printf(\"%d \", node.Value)\n\tbt.recursiveShowInOrder(node.Right)\n}\n\nfunc main() {\n\tvar line string\n    scanner := bufio.NewScanner(os.Stdin)\n    scanner.Scan()\n    line = scanner.Text()\n//\tfmt.Printf(\"DEBUG:  '%s'\\n\", line)\n\tbt := NewBtreeSerial(line)\n\tbt.ShowInOrder()\n\n\t//bt.bShow()\n}\n",
            "lines": "122"
        }
    ]
}