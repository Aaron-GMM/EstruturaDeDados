{
    "patches": [
        {
            "label": "2025-04-29_08-34-05",
            "content": "@@ -704,38 +704,8 @@\n %0A%09%7D%0A\n-%09mat%5Batual.l%5D%5Batual.c%5D = 'x' %0A\n %09ret\n"
        },
        {
            "label": "2025-04-29_08-35-28",
            "content": "@@ -594,40 +594,8 @@\n %0A%09%7D%0A\n-%09mat%5Batual.l%5D%5Batual.c%5D = '*' %0A%09%0A\n %09for\n"
        },
        {
            "label": "2025-04-29_08-36-03",
            "content": "@@ -594,43 +594,8 @@\n %0A%09%7D%0A\n-%09if atual == fim%7B%0A%09%09return true%0A%09%7D%0A\n %09mat\n"
        },
        {
            "label": "2025-04-29_08-37-56",
            "content": "@@ -651,17 +651,17 @@\n l.c%5D = '\n-.\n+*\n ' %0A%09%0A%09fo\n"
        },
        {
            "label": "2025-04-29_08-38-18",
            "content": "@@ -612,38 +612,8 @@\n im%7B%0A\n-%09%09mat%5Batual.l%5D%5Batual.c%5D = 'F'%0A\n %09%09re\n"
        },
        {
            "label": "2025-04-29_08-39-51",
            "content": "@@ -635,17 +635,17 @@\n l.c%5D = '\n-.\n+F\n '%0A%09%09retu\n"
        },
        {
            "label": "2025-04-29_08-40-05",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\ntype Pos struct {\n\tl, c int\n}\n\n// compara duas posi\u00e7\u00f5es\nfunc (p Pos) equals(other Pos) bool {\n\treturn p.l == other.l && p.c == other.c\n}\n\nfunc (p Pos) getNeighbors() []Pos {\n\treturn []Pos{\n\t\t{p.l, p.c - 1},\n\t\t{p.l - 1, p.c},\n\t\t{p.l, p.c + 1},\n\t\t{p.l + 1, p.c},\n\t}\n}\n\n// Fun\u00e7\u00e3o recursiva que tenta encontrar o caminho do in\u00edcio ao fim\nfunc procurarSaida(mat [][]rune, atual, fim Pos) bool {\n\tif (atual.l <0 || atual.l >= len(mat))||(atual.c < 0 || atual.c >= len(mat[0])) {\n\t\treturn false\n\t}  \n    \n\tif mat[atual.l][atual.c]!= '_'{\n\t\treturn false\n\t}\n\tif atual == fim{\n\t\tmat[atual.l][atual.c] = '.'\n\t\treturn true\n\t}\n\tmat[atual.l][atual.c] = '.' \n\t\n\tfor _, vizinho := range atual.getNeighbors() {\n\t\tif procurarSaida(mat, vizinho, fim) {\n\t\t\treturn true\n\t\t}\n\t}\n\tmat[atual.l][atual.c] = 'x' \n\treturn false\n\n\t// se posi\u00e7\u00e3o n\u00e3o existir ou n\u00e3o for caminho retorne falso\n\n\t// se posi\u00e7\u00e3o for o fim retorne verdadeiro\n\t// marca a posi\u00e7\u00e3o atual como possivel caminho usando .\n\t// para cada vizinho, chama a fun\u00e7\u00e3o recursivamente\n\t// se algum dos meus vizinho for caminho, eu sou caminho\n\t// se nenhum vizinho for caminho, eu sou erro\n\t// marca a posi\u00e7\u00e3o atual como erro usando x\n\t// retorna falso\n}\n\nfunc removerErros(mat [][]rune) {\n\tfor l := range mat {\n\t\tfor c := range mat[0] {\n\t\t\tif mat[l][c] == 'x' {\n\t\t\t\tmat[l][c] = '_'\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tnl_nc := scanner.Text()\n\tvar nl, nc int\n\tfmt.Sscanf(nl_nc, \"%d %d\", &nl, &nc)\n\tmat := make([][]rune, nl)\n\n\t// L\u00ea a matriz\n\tfor i := range nl {\n\t\tscanner.Scan()\n\t\tmat[i] = []rune(scanner.Text())\n\t}\n\n\t// Procura posi\u00e7\u00f5es de in\u00edcio e fim e conserta para _\n\tinicio, fim := procurarPosicoes(mat)\n\tprocurarSaida(mat, inicio, fim)\n\tremoverErros(mat)\n\n\t// Imprime o labirinto final\n\tfor _, line := range mat {\n\t\tfmt.Println(string(line))\n\t}\n}\n\n// procura as posi\u00e7\u00f5es de in\u00edcio e fim do labirinto\n// depois, as substitui por '_'\nfunc procurarPosicoes(mat [][]rune) (Pos, Pos) {\n\tnl := len(mat)\n\tnc := len(mat[0])\n\tinicio := Pos{}\n\tfim := Pos{}\n\tfor l := range nl {\n\t\tfor c := range nc {\n\t\t\tswitch mat[l][c] {\n\t\t\tcase 'I':\n\t\t\t\tmat[l][c] = '_'\n\t\t\t\tinicio = Pos{l, c}\n\t\t\tcase 'F':\n\t\t\t\tmat[l][c] = '_'\n\t\t\t\tfim = Pos{l, c}\n\t\t\t}\n\t\t}\n\t}\n\treturn inicio, fim\n}\n"
        }
    ]
}