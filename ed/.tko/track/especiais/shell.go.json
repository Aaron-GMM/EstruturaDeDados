{
    "patches": [
        {
            "label": "2025-04-23_10-37-55",
            "content": "@@ -515,17 +515,16 @@\n %7D%0A%09 tam \n-:\n = len(ve\n"
        },
        {
            "label": "2025-04-23_10-38-08",
            "content": "@@ -714,124 +714,15 @@\n  %7B%0A%09\n-res := make(%5B%5Dint, len(vet))%0A%09for i, x := range vet%7B%0A%09%09if x%3E0 %7B%0A%09%09%09if (i%3E0 && vet%5Bi-1%5D%3C0)%7B%0A%09%09%09%09res%5Bi%5D= 1%0A%09%09%09%7D%0A%09%09%7D%0A%09%7D\n+_ = vet\n %0A%09re\n@@ -718,35 +718,35 @@\n _ = vet%0A%09return \n-res\n+nil\n %0A%7D%0A%0Afunc alone(v\n"
        },
        {
            "label": "2025-04-23_10-49-36",
            "content": "@@ -803,42 +803,8 @@\n %5D%3C0)\n- %7C%7C (i+1%3C len(vet) && vet%5Bi+1%5D%3C0 )\n %7B%0A%09%09\n"
        },
        {
            "label": "2025-04-23_10-50-35",
            "content": "@@ -911,160 +911,15 @@\n  %7B%0A%09\n-res := make(%5B%5Dint, len(vet))%0A%09for i, x := range vet%7B%0A%09%09if x%3E0 %7B%0A%09%09%09if ! (i%3E0 && vet%5Bi-1%5D%3C0) %7C%7C (i+1%3C len(vet) && vet%5Bi+1%5D%3C0 )%7B%0A%09%09%09%09res%5Bi%5D= 1%0A%09%09%09%7D%0A%09%09%7D%0A%09%7D\n+_ = vet\n %0A%09re\n@@ -915,35 +915,35 @@\n _ = vet%0A%09return \n-res\n+nil\n %0A%7D%0A%0Afunc couple(\n"
        },
        {
            "label": "2025-04-23_10-56-33",
            "content": "@@ -978,16 +978,17 @@\n %0A%09%09%09if !\n+ \n (i%3E0 && \n@@ -1038,31 +1038,8 @@\n  )%7B%0A\n-%09%09%09%09continue%0A%09%09%09%7Delse%7B%0A\n %09%09%09%09\n@@ -1044,17 +1044,16 @@\n %09%09res%5Bi%5D\n- \n = 1%0A%09%09%09%7D\n"
        },
        {
            "label": "2025-04-23_10-58-37",
            "content": "@@ -969,32 +969,33 @@\n %09if x%3E0 %7B%0A%09%09%09if \n+!\n (i%3E0 && vet%5Bi-1%5D\n"
        },
        {
            "label": "2025-04-23_10-59-07",
            "content": "@@ -1131,234 +1131,15 @@\n  %7B%0A%09\n-count := make(map%5Bint%5Dint)%0A%09for _, x := range vet %7B%0A%09%09count%5Bx%5D++%0A%09%7D%0A%09couples := 0%0A%09for k, v := range count %7B%0A%09%09if k %3E 0 && count%5B-k%5D %3E 0 %7B%0A%09%09%09if v %3C count%5B-k%5D %7B%0A%09%09%09%09couples += v%0A%09%09%09%7D else %7B%0A%09%09%09%09couples += count%5B-k%5D%0A%09%09%09%7D%0A%09%09%7D%0A%09%7D\n+_ = vet\n %0A%09re\n@@ -1147,16 +1147,9 @@\n urn \n-couples \n+0\n %0A%7D%0A%0A\n"
        },
        {
            "label": "2025-04-24_08-42-30",
            "content": "@@ -195,17 +195,15 @@\n  vet\n- \n %7B%0A%09%09lvl\n- \n := x\n@@ -215,13 +215,10 @@\n  lvl\n- %3C 0 \n+%3C0\n %7B%0A%09%09\n@@ -302,17 +302,16 @@\n ange par\n- \n %7B%0A%09%09keys\n@@ -404,17 +404,16 @@\n nge keys\n- \n %7B%0A%09%09res%5B\n@@ -414,17 +414,16 @@\n %09%09res%5Bi%5D\n- \n = Pair%7BO\n@@ -425,17 +425,16 @@\n air%7BOne:\n- \n k, Two: \n@@ -447,32 +447,33 @@\n %7D%0A%09%7D%0A%09return res\n+ \n %0A%7D%0A%0Afunc teams(v\n@@ -488,24 +488,25 @@\n ) %5B%5DPair %7B%0A%09\n+ \n res := %5B%5DPai\n@@ -510,16 +510,17 @@\n Pair%7B%7D%0A%09\n+ \n tam := l\n@@ -532,42 +532,36 @@\n t)%0A%09\n+ \n for i\n- \n := 0; i\n- %3C \n+%3C\n tam;\n- \n %7B%0A%09%09j\n- \n := i\n- + \n++\n 1%0A%09%09\n@@ -567,17 +567,16 @@\n %09for j %3C\n- \n tam && v\n@@ -590,17 +590,16 @@\n = vet%5Bi%5D\n- \n %7B%0A%09%09%09j++\n@@ -632,16 +632,17 @@\n air%7BOne:\n+ \n  vet%5Bi%5D,\n@@ -650,13 +650,10 @@\n Two:\n- j - \n+j-\n i%7D)%0A\n@@ -661,16 +661,17 @@\n %09i = j%0A%09\n+ \n %7D%0A%09retur\n@@ -757,33 +757,32 @@\n := range vet\n- \n %7B%0A%09%09if x\n  %3E 0 %7B%0A%09%09%09if\n@@ -761,35 +761,33 @@\n ange vet%7B%0A%09%09if x\n- %3E \n+%3E\n 0 %7B%0A%09%09%09if (i %3E 0\n@@ -774,35 +774,33 @@\n f x%3E0 %7B%0A%09%09%09if (i\n- %3E \n+%3E\n 0 && vet%5Bi-1%5D %3C \n@@ -788,35 +788,33 @@\n (i%3E0 && vet%5Bi-1%5D\n- %3C \n+%3C\n 0) %7C%7C (i+1 %3C len\n@@ -799,33 +799,32 @@\n %5Bi-1%5D%3C0) %7C%7C (i+1\n- \n %3C len(vet) && ve\n@@ -825,30 +825,28 @@\n  && vet%5Bi+1%5D\n- %3C 0) \n+%3C0 )\n %7B%0A%09%09%09%09res%5Bi%5D\n@@ -837,33 +837,32 @@\n %3C0 )%7B%0A%09%09%09%09res%5Bi%5D\n- \n = 1%0A%09%09%09%7D%0A%09%09%7D%0A%09%7D%0A\n@@ -962,17 +962,16 @@\n  vet\n- \n %7B%0A%09%09if x\n  %3E 0\n@@ -966,19 +966,17 @@\n %7B%0A%09%09if x\n- %3E \n+%3E\n 0 %7B%0A%09%09%09i\n@@ -979,19 +979,17 @@\n %09%09%09if (i\n- %3E \n+%3E\n 0 && vet\n@@ -993,19 +993,17 @@\n vet%5Bi-1%5D\n- %3C \n+%3C\n 0) %7C%7C (i\n@@ -1004,17 +1004,16 @@\n  %7C%7C (i+1\n- \n %3C len(ve\n@@ -1030,14 +1030,12 @@\n i+1%5D\n- %3C 0) \n+%3C0 )\n %7B%0A%09%09\n@@ -1045,30 +1045,28 @@\n ontinue%0A%09%09%09%7D\n- \n else\n- \n %7B%0A%09%09%09%09res%5Bi%5D\n@@ -1369,16 +1369,17 @@\n  couples\n+ \n %0A%7D%0A%0Afunc\n@@ -1516,188 +1516,24 @@\n  %7B%0A%09\n-for i := 0; i+len(seq) %3C= len(vet); i++ %7B%0A%09%09ok := true%0A%0A%09%09for j := 0; j %3C len(seq); j++ %7B%0A%09%09%09if vet%5Bi+j%5D != seq%5Bj%5D %7B%0A%09%09%09%09ok = false%0A%09%09%09%09break%0A%09%09%09%7D%0A%09%09%7D%0A%09%09if ok %7B%0A%09%09%09return i%0A%09%09%7D%0A%09%7D%0A\n+_ = vet%0A%09_ = seq\n %0A%09re\n"
        },
        {
            "label": "2025-04-24_08-52-57",
            "content": "@@ -1794,146 +1794,28 @@\n  %7B%0A%09\n-for _, rem := range posList %7B%0A%09%09for i, p := range vet %7B%0A%09%09%09%0A%09%09%09if p == rem %7B%0A%09%09%09%09vet = append(vet%5B:i%5D, vet%5Bi+1:%5D...)%0A%09%09%09%09break%0A%09%09%09%7D%0A%09%09%7D%0A%09%7D\n+_ = vet%0A%09_ = posList\n %0A%09re\n@@ -1811,35 +1811,35 @@\n posList%0A%09return \n-vet\n+nil\n %0A%7D%0A%0Afunc clear(v\n"
        },
        {
            "label": "2025-04-24_08-57-15",
            "content": "@@ -1798,14 +1798,14 @@\n for \n-idx, _\n+_, rem\n  := \n@@ -1829,17 +1829,17 @@\n %09for i, \n-_\n+p\n  := rang\n@@ -1860,16 +1860,16 @@\n %09if \n-i\n+p\n  == \n-idx\n+rem\n  %7B%0A%09\n"
        },
        {
            "label": "2025-04-24_08-58-33",
            "content": "@@ -1798,14 +1798,14 @@\n for \n-_, rem\n+idx, _\n  := \n@@ -1861,19 +1861,19 @@\n if i == \n-rem\n+idx\n  %7B%0A%09%09%09%09v\n@@ -1893,21 +1893,17 @@\n et%5B:\n-rem\n+i\n %5D, vet%5B\n-rem\n+i\n +1:%5D\n"
        },
        {
            "label": "2025-04-24_09-00-06",
            "content": "@@ -1902,16 +1902,18 @@\n  vet%5Brem\n++1\n :%5D...)%0A%09\n"
        },
        {
            "label": "2025-04-24_09-00-59",
            "content": "@@ -1893,19 +1893,21 @@\n et%5B:\n-i\n+rem\n %5D, vet%5B\n-i+1\n+rem\n :%5D..\n"
        },
        {
            "label": "2025-04-24_09-02-32",
            "content": "@@ -1793,43 +1793,16 @@\n t %7B%0A\n-%09rem := make(map%5Bint%5Dbool)%0A\n %09for _, \n pos \n@@ -1797,19 +1797,19 @@\n %09for _, \n-pos\n+rem\n  := rang\n@@ -1825,28 +1825,8 @@\n  %7B%0A%09\n-%09rem%5Bpos%5D = true%0A%09%7D%0A\n %09for\n@@ -1852,21 +1852,28 @@\n %7B%0A%09%09\n-if !rem%5Bi%5D\n+%09%0A%09%09%09if i == rem\n  %7B%0A\n+%09\n %09%09%09v\n@@ -1910,24 +1910,25 @@\n ...)%0A%09%09%09\n+%09\n break%0A%09%09\n %7D%0A%09%7D%0A%09re\n@@ -1919,22 +1919,27 @@\n break%0A%09%09\n-%7D%0A\n %09%7D%0A%09\n+%09%7D%0A%09%7D%0A%09\n return v\n@@ -1945,320 +1945,8 @@\n vet%0A\n-%7D%0A// func erase(vet %5B%5Dint, posList %5B%5Dint) %5B%5Dint %7B%0A// %09// Remove %C3%ADndices fornecidos%0A// %09toRemove := make(map%5Bint%5Dbool)%0A// %09for _, idx := range posList %7B%0A// %09%09toRemove%5Bidx%5D = true%0A// %09%7D%0A// %09res := %5B%5Dint%7B%7D%0A// %09for i, v := range vet %7B%0A// %09%09if !toRemove%5Bi%5D %7B%0A// %09%09%09res = append(res, v)%0A// %09%09%7D%0A// %09%7D%0A// %09return res%0A// \n %7D%0A%0Af\n"
        },
        {
            "label": "2025-04-24_09-07-13",
            "content": "@@ -1947,16 +1947,25 @@\n 1:%5D...)%0A\n+%09%09%09break%0A\n %09%09%7D%0A%09%7D%0A%09\n"
        },
        {
            "label": "2025-04-24_09-10-34",
            "content": "@@ -1873,25 +1873,308 @@\n %09%7D%0A%09\n-newfila\n+for i, _ := range vet %7B%0A%09%09if !rem%5Bi%5D %7B%0A%09%09%09vet = append(vet%5B:i%5D, vet%5Bi+1:%5D...)%0A%09%09%7D%0A%09%7D%0A%09return vet%0A%7D%0A// func erase(vet %5B%5Dint, posList %5B%5Dint) %5B%5Dint %7B%0A// %09// Remove %C3%ADndices fornecidos%0A// %09toRemove := make(map%5Bint%5Dbool)%0A// %09for _, idx := range posList %7B%0A// %09%09toRemove%5Bidx%5D = true%0A// %09%7D%0A// %09res \n :=\n+ \n %5B%5Dint%7B%7D%0A\n %09for\n@@ -2169,16 +2169,19 @@\n %5B%5Dint%7B%7D%0A\n+// \n %09for i, \n@@ -2201,33 +2201,40 @@\n t %7B%0A\n+// \n %09%09if !\n-rem%5Bi%5D %7B%0A%09%09%09newfila\n+toRemove%5Bi%5D %7B%0A// %09%09%09res\n  = a\n@@ -2243,43 +2243,47 @@\n end(\n-newfila\n+res\n , v)%0A\n+// \n %09%09%7D%0A\n-%09%7D%0A%09return newfila%0A\n+// %09%7D%0A// %09return res%0A// \n %7D%0A%0Af\n"
        },
        {
            "label": "2025-04-24_09-17-04",
            "content": "@@ -2030,292 +2030,39 @@\n  %7B%0A%09\n-newvet := %5B%5Dint%7B%7D%0A%09for _, v := range\n+_ =\n  vet\n-%7B\n %0A%09\n-%09if v != value %7B%0A%09%09%09newvet = append(newvet, v)%0A%09%09%7D%0A%09%7D%0A%09return newvet%0A%7D%0A// func clear(vet %5B%5Dint, value int) %5B%5Dint %7B%0A// %09res := %5B%5Dint%7B%7D%0A// %09for _, v := range vet %7B%0A// %09%09if v != value %7B%0A// %09%09%09res = append(res, v)%0A// %09%09%7D%0A// %09%7D%0A// %09return res%0A// \n+_ = value%0A%09return nil%0A\n %7D%0A%0Af\n"
        },
        {
            "label": "2025-04-24_09-19-03",
            "content": "@@ -1469,102 +1469,46 @@\n  %7B%0A%09\n-for j := 0; j %3C len(seq); j++ %7B%0A%09%09if vet%5Bpos+j%5D != seq%5Bj%5D %7B%0A%09%09%09return false%0A%09%09%7D%0A%09%7D%0A%09return tru\n+_ = vet%0A%09_ = seq%0A%09_ = pos%0A%09return fals\n e%0A%7D%0A\n@@ -1553,91 +1553,82 @@\n  %7B%0A%09\n-if len(seq) == 0 %7C%7C \n+for i := 0; i+\n len(\n-vet\n+seq\n ) %3C\n+=\n  len(\n-seq) %7B%0A%09%09return -1%0A%09%7D%0A%0A\n+vet); i++ %7B%0A%09%09ok := true%0A%0A%09\n %09for \n-i\n+j \n := 0; \n-i%3C= len(vet)-\n+j %3C \n len(\n@@ -1637,43 +1637,84 @@\n q); \n-i\n+j\n ++\n+ \n %7B%0A\n+%09\n %09%09if \n- hasSubseq(vet, seq, i)%7B \n+vet%5Bi+j%5D != seq%5Bj%5D %7B%0A%09%09%09%09ok = false%0A%09%09%09%09break%0A%09%09%09%7D%0A%09%09%7D%0A%09%09if ok %7B\n %0A%09%09%09\n@@ -1721,32 +1721,33 @@\n return i%0A%09%09%7D%0A%09%7D%0A\n+%0A\n %09return -1%0A%7D%0A%0Afu\n@@ -2135,24 +2135,196 @@\n urn newvet%0A%7D\n+%0A// func clear(vet %5B%5Dint, value int) %5B%5Dint %7B%0A// %09res := %5B%5Dint%7B%7D%0A// %09for _, v := range vet %7B%0A// %09%09if v != value %7B%0A// %09%09%09res = append(res, v)%0A// %09%09%7D%0A// %09%7D%0A// %09return res%0A// %7D\n %0A%0Afunc main(\n"
        },
        {
            "label": "2025-04-26_15-38-23",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Pair struct {\n\tOne int\n\tTwo int\n}\n\nfunc occurr(vet []int) []Pair {\n\tpar := make(map[int]int)\n\tfor _, x := range vet {\n\t\tlvl := x\n\t\tif lvl < 0 {\n\t\t\tlvl = -lvl\n\t\t}\n\t\tpar[lvl]++\n\t}\n\tkeys := make([]int, 0, len(vet))\n\tfor k := range par {\n\t\tkeys = append(keys, k)\n\t}\n\tsort.Ints(keys)\n\tres := make([]Pair, len(keys))\n\tfor i, k := range keys {\n\t\tres[i] = Pair{One: k, Two: par[k]}\n\t}\n\treturn res\n}\n\nfunc teams(vet []int) []Pair {\n\tres := []Pair{}\n\ttam := len(vet)\n\tfor i := 0; i < tam; {\n\t\tj := i + 1\n\t\tfor j < tam && vet[j] == vet[i] {\n\t\t\tj++\n\t\t}\n\t\tres = append(res, Pair{One: vet[i], Two: j - i})\n\t\ti = j\n\t}\n\treturn res\n}\n\nfunc mnext(vet []int) []int {\n\tres := make([]int, len(vet))\n\tfor i, x := range vet {\n\t\tif x > 0 {\n\t\t\tif (i > 0 && vet[i-1] < 0) || (i+1 < len(vet) && vet[i+1] < 0) {\n\t\t\t\tres[i] = 1\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\nfunc alone(vet []int) []int {\n\tres := make([]int, len(vet))\n\tfor i, x := range vet {\n\t\tif x > 0 {\n\t\t\tif (i > 0 && vet[i-1] < 0) || (i+1 < len(vet) && vet[i+1] < 0) {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tres[i] = 1\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\nfunc couple(vet []int) int {\n\tcount := make(map[int]int)\n\tfor _, x := range vet {\n\t\tcount[x]++\n\t}\n\tcouples := 0\n\tfor k, v := range count {\n\t\tif k > 0 && count[-k] > 0 {\n\t\t\tif v < count[-k] {\n\t\t\t\tcouples += v\n\t\t\t} else {\n\t\t\t\tcouples += count[-k]\n\t\t\t}\n\t\t}\n\t}\n\treturn couples\n}\n\nfunc hasSubseq(vet []int, seq []int, pos int) bool {\n\tfor j := 0; j < len(seq); j++ {\n\t\tif vet[pos+j] != seq[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc subseq(vet []int, seq []int) int {\n\tif len(seq) == 0 || len(vet) < len(seq) {\n\t\treturn -1\n\t}\n\n\tfor i:= 0; i<= len(vet)-len(seq); i++{\n\t\tif  hasSubseq(vet, seq, i){ \n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\nfunc erase(vet []int, posList []int) []int {\n\trem := make(map[int]bool)\n\tfor _, pos := range posList {\n\t\trem[pos] = true\n\t}\n\tnewfila:=[]int{}\n\tfor i, v := range vet {\n\t\tif !rem[i] {\n\t\t\tnewfila = append(newfila, v)\n\t\t}\n\t}\n\treturn newfila\n}\n\nfunc clear(vet []int, value int) []int {\n\tnewvet := []int{}\n\tfor _, v := range vet{\n\t\tif v != value {\n\t\t\tnewvet = append(newvet, v)\n\t\t}\n\t}\n\treturn newvet\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\targs := strings.Split(line, \" \")\n\t\tfmt.Println(line)\n\n\t\tswitch args[0] {\n\t\tcase \"occurr\":\n\t\t\tprintSlice(occurr(str2vet(args[1])))\n\t\tcase \"teams\":\n\t\t\tprintSlice(teams(str2vet(args[1])))\n\t\tcase \"mnext\":\n\t\t\tprintSlice(mnext(str2vet(args[1])))\n\t\tcase \"alone\":\n\t\t\tprintSlice(alone(str2vet(args[1])))\n\t\tcase \"erase\":\n\t\t\tprintSlice(erase(str2vet(args[1]), str2vet(args[2])))\n\t\tcase \"clear\":\n\t\t\tval, _ := strconv.Atoi(args[2])\n\t\t\tprintSlice(clear(str2vet(args[1]), val))\n\t\tcase \"subseq\":\n\t\t\tfmt.Println(subseq(str2vet(args[1]), str2vet(args[2])))\n\t\tcase \"couple\":\n\t\t\tfmt.Println(couple(str2vet(args[1])))\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"Invalid command\")\n\t\t}\n\t}\n}\n\n// Fun\u00e7\u00f5es auxiliares\n\nfunc str2vet(str string) []int {\n\tif str == \"[]\" {\n\t\treturn nil\n\t}\n\tstr = str[1 : len(str)-1]\n\tparts := strings.Split(str, \",\")\n\tvar vet []int\n\tfor _, part := range parts {\n\t\tnum, _ := strconv.Atoi(strings.TrimSpace(part))\n\t\tvet = append(vet, num)\n\t}\n\treturn vet\n}\n\nfunc printSlice[T any](vet []T) {\n\tfmt.Print(\"[\")\n\tfor i, x := range vet {\n\t\tif i > 0 {\n\t\t\tfmt.Print(\", \")\n\t\t}\n\t\tfmt.Print(x)\n\t}\n\tfmt.Println(\"]\")\n}\n\nfunc (p Pair) String() string {\n\treturn fmt.Sprintf(\"(%v, %v)\", p.One, p.Two)\n}\n"
        }
    ]
}