{
    "patches": [
        {
            "label": "2025-05-29_08-49-00",
            "content": "@@ -42,19 +42,8 @@\n os%22%0A\n-%09%22strconv%22%0A\n %09%22st\n@@ -985,16 +985,18 @@\n .Stdin)%0A\n+//\n  %09ll := \n@@ -1239,16 +1239,18 @@\n ow%22:%0A%09%09%09\n+//\n  fmt.Pri\n@@ -1263,24 +1263,24 @@\n l.String())%0A\n-\n %09%09case %22size\n@@ -1334,16 +1334,19 @@\n ck%22:%0A%09%09%09\n+// \n for _, v\n@@ -1369,16 +1369,19 @@\n :%5D %7B%0A%09%09%09\n+// \n %09num, _ \n@@ -1402,16 +1402,19 @@\n i(v)%0A%09%09%09\n+// \n %09ll.Push\n@@ -1426,16 +1426,19 @@\n num)%0A%09%09%09\n+// \n %7D%0A%09%09case\n"
        },
        {
            "label": "2025-05-29_08-51-18",
            "content": "@@ -945,160 +945,8 @@\n %22%0A%7D%0A\n-func (l *LList%5BT%5D) Search(value T) *Node%5BT%5D %7B%0A%09for n := l.root.next; n != l.root; n = n.next %7B%0A%09%09if n.Value == value %7B%0A%09%09%09return n%0A%09%09%7D%0A%09%7D%0A%09return nil%0A%7D%0A\n %0A%0Afu\n@@ -1480,16 +1480,19 @@\n rd%22:%0A%09%09%09\n+// \n search, \n@@ -1521,16 +1521,19 @@\n %5B1%5D)%0A%09%09%09\n+// \n steps, _\n@@ -1561,16 +1561,19 @@\n %5B2%5D)%0A%09%09%09\n+// \n node := \n@@ -1593,16 +1593,19 @@\n rch)%0A%09%09%09\n+// \n if node \n@@ -1616,16 +1616,19 @@\n il %7B%0A%09%09%09\n+// \n %09fmt.Pri\n@@ -1665,16 +1665,19 @@\n do%22)%0A%09%09%09\n+// \n %09continu\n@@ -1681,21 +1681,27 @@\n inue%0A%09%09%09\n+// \n %7D%0A%09%09%09\n+// \n collect \n@@ -1713,24 +1713,27 @@\n string%7B%7D%0A%09%09%09\n+// \n for range st\n@@ -1741,16 +1741,19 @@\n ps %7B%0A%09%09%09\n+// \n %09collect\n@@ -1805,16 +1805,19 @@\n ue))%0A%09%09%09\n+// \n %09node = \n@@ -1831,21 +1831,27 @@\n xt()%0A%09%09%09\n+// \n %7D%0A%09%09%09\n+// \n fmt.Prin\n"
        },
        {
            "label": "2025-05-29_08-52-12",
            "content": "@@ -481,109 +481,8 @@\n %0A%7D%0A%0A\n-func (n *Node%5BT%5D) Prev() *Node%5BT%5D%7B%0A%09if n.prev == n.root %7B%0A%09%09return n.root.prev%0A%09%7D%0A%09return n.prev%0A%09%7D%0A%0A\n func\n@@ -516,16 +516,16 @@\n ue T) %7B%0A\n+\n %09l.inser\n@@ -1098,94 +1098,8 @@\n %0A%7D%0A%0A\n-func (l *LList%5BT%5D) Clear()%7B%0A%09l.root.next = l.root%0A%09l.root.prev = l.root%0A%09l.size = 0%0A%7D%0A\n %0Afun\n@@ -1597,16 +1597,18 @@\n ar%22:%0A%09%09%09\n+//\n  ll.Clea\n@@ -2020,32 +2020,35 @@\n  %22backward%22:%0A%09%09%09\n+// \n search, _ := str\n@@ -2061,32 +2061,35 @@\n toi(args%5B1%5D)%0A%09%09%09\n+// \n steps, _ := strc\n@@ -2101,32 +2101,35 @@\n toi(args%5B2%5D)%0A%09%09%09\n+// \n node := ll.Searc\n@@ -2133,32 +2133,35 @@\n arch(search)%0A%09%09%09\n+// \n if node == nil %7B\n@@ -2156,32 +2156,35 @@\n ode == nil %7B%0A%09%09%09\n+// \n %09fmt.Println(%22fa\n@@ -2205,32 +2205,35 @@\n encontrado%22)%0A%09%09%09\n+// \n %09continue%0A%09%09%09%7D%0A%09\n@@ -2221,37 +2221,43 @@\n // %09continue%0A%09%09%09\n+// \n %7D%0A%09%09%09\n+// \n collect := %5B%5Dstr\n@@ -2257,32 +2257,35 @@\n = %5B%5Dstring%7B%7D%0A%09%09%09\n+// \n for range steps \n@@ -2281,32 +2281,35 @@\n ange steps %7B%0A%09%09%09\n+// \n %09collect = appen\n@@ -2345,32 +2345,35 @@\n node.Value))%0A%09%09%09\n+// \n %09node = node.Pre\n@@ -2375,29 +2375,35 @@\n e.Prev()%0A%09%09%09\n+// \n %7D%0A%09%09%09\n+// \n fmt.Printf(%22\n"
        },
        {
            "label": "2025-05-29_08-54-32",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node[T comparable] struct {\n\tValue T\n\tnext  *Node[T]\n\tprev  *Node[T]\n\troot  *Node[T]\n}\n\ntype LList[T comparable] struct {\n\troot *Node[T]\n\tsize int\n}\n\nfunc NewLList[T comparable]() *LList[T] {\n\troot := &Node[T]{}\n\troot.next = root\n\troot.prev = root\n\troot.root = root\n\treturn &LList[T]{root: root, size: 0}\n}\n\nfunc (n *Node[T]) Next() *Node[T] {\n\tif n.next == n.root {\n\t\treturn n.root.next\n\t}\n\treturn n.next\n}\n\nfunc (n *Node[T]) Prev() *Node[T]{\n\tif n.prev == n.root {\n\t\treturn n.root.prev\n\t}\n\treturn n.prev\n\t}\n\nfunc (l *LList[T]) PushBack(value T) {\n\tl.insertBefore(l.root, value)\n}\n\nfunc (l *LList[T]) insertBefore(mark *Node[T], value T) {\n\tn := &Node[T]{Value: value, root: l.root}\n\tn.prev = mark.prev\n\tn.next = mark\n\tmark.prev.next = n\n\tmark.prev = n\n\tl.size++\n}\n\nfunc (l *LList[T]) String() string {\n\tvalues := []string{}\n\tfor n := l.root.next; n != l.root; n = n.next {\n\t\tvalues = append(values, fmt.Sprint(n.Value))\n\t}\n\treturn \"[\" + strings.Join(values, \", \") + \"]\"\n}\nfunc (l *LList[T]) Search(value T) *Node[T] {\n\tfor n := l.root.next; n != l.root; n = n.next {\n\t\tif n.Value == value {\n\t\t\treturn n\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (l *LList[T]) Clear(){\n\tl.root.next = l.root\n\tl.root.prev = l.root\n\tl.size = 0\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n \tll := NewLList[int]()\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\t fmt.Println(ll.String())\n\t\tcase \"size\":\n\t\t\t// fmt.Println(ll.Size())\n\t\tcase \"push_back\":\n\t\t\tfor _, v := range args[1:] {\n\t\t\t\tnum, _ := strconv.Atoi(v)\n\t\t\t\tll.PushBack(num)\n\t\t\t}\n\t\tcase \"clear\":\n\t\t\t ll.Clear()\n\t\tcase \"forward\":\n\t\t\tsearch, _ := strconv.Atoi(args[1])\n\t\t\tsteps, _ := strconv.Atoi(args[2])\n\t\t\tnode := ll.Search(search)\n\t\t\tif node == nil {\n\t\t\t\tfmt.Println(\"fail: valor n\u00e3o encontrado\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tcollect := []string{}\n\t\t\tfor range steps {\n\t\t\t\tcollect = append(collect, fmt.Sprintf(\"%v\", node.Value))\n\t\t\t\tnode = node.Next()\n\t\t\t}\n\t\t\tfmt.Printf(\"[ %s ]\\n\", strings.Join(collect, \" \"))\n\t\tcase \"backward\":\n\t\t\tsearch, _ := strconv.Atoi(args[1])\n\t\t\tsteps, _ := strconv.Atoi(args[2])\n\t\t\tnode := ll.Search(search)\n\t\t\tif node == nil {\n\t\t\t\tfmt.Println(\"fail: valor n\u00e3o encontrado\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tcollect := []string{}\n\t\t\tfor range steps {\n\t\t\t\tcollect = append(collect, fmt.Sprintf(\"%v\", node.Value))\n\t\t\t\tnode = node.Prev()\n\t\t\t}\n\t\t\tfmt.Printf(\"[ %s ]\\n\", strings.Join(collect, \" \"))\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n"
        }
    ]
}